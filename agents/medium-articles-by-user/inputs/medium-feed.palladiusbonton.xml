<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Riccardo Carlesso on Medium]]></title>
        <description><![CDATA[Stories by Riccardo Carlesso on Medium]]></description>
        <link>https://medium.com/@palladiusbonton?source=rss-b5293b96912f------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*OT2alojsWtYC4OHgxNdDtg.jpeg</url>
            <title>Stories by Riccardo Carlesso on Medium</title>
            <link>https://medium.com/@palladiusbonton?source=rss-b5293b96912f------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Wed, 03 Jul 2024 16:01:15 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@palladiusbonton/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[RAG one-liners: curling a website with Gemma]]></title>
            <link>https://blog.devops.dev/comand-line-rag-with-ruby-bash-and-gemma-curling-a-website-without-apis-de69215d43df?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/de69215d43df</guid>
            <category><![CDATA[retrieval-augmented-gen]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[llm]]></category>
            <category><![CDATA[swimming]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Fri, 07 Jun 2024 09:50:32 GMT</pubDate>
            <atom:updated>2024-07-03T15:30:50.286Z</atom:updated>
            <content:encoded><![CDATA[<p>I recently did a <strong>RAG</strong> (<a href="https://cloud.google.com/use-cases/retrieval-augmented-generation">Retrieval-Augmented Generation</a>) demo in Ruby (interested? Check my <a href="https://github.com/palladius/gemini-news-crawler?tab=readme-ov-file#bibliography">code</a> and <a href="https://github.com/palladius/gemini-news-crawler?tab=readme-ov-file#bibliography">bibliography</a>). However, when I talk about RAG with my practitioners, they usually don’t know where to start. I thought to myself (yes, I tend to speak to myself a lot, especially when I cycle or swim):</p><p>— “Hey, RAG should be as easy as: cat content.prompt | sed “s/template/My real Content” | ollama gemma run!” (*)<br> —<strong> </strong><em>“Wait — what?“<br></em>— “Is it not obvious? <em>Maybe I should write an article about it!”</em></p><p><em>(*) If this is obscure for you, just look a bit further down. There’s a diagram to explain.</em></p><p>So here we are! I’m going to show you a <strong>real-life example</strong> which is useful in my triathlete daily routine, and hopefully is relateable to you:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*HtHEeezYnWxJ5CZw" /><figcaption>My first swim in the Zurisee in 2024. Water temperature was 16°C! Brrrr!</figcaption></figure><p><strong><em>Coders</em></strong><em>: are you bored by too much text and want to jump to the code? </em><a href="https://github.com/palladius/genai-googlecloud-scripts/tree/main/15-ollama-gemma-RAG-curl-ruby"><strong><em>Here</em></strong><em> it is</em></a><em>!</em></p><h4>Why RAG? What is RAG again?</h4><p>In a nutshell, LLMs have a two problems:</p><ol><li>A tendency to hallucinate (ie, fabricate false news) and</li><li>produce outdated news.</li></ol><p>How do you fix this? By injecting vetted/recent data to address (1) and (2) respectively.</p><p>In a nutshell, you “G<em>oogle the solution</em>” and add it to the prompt. This seems complicated, but it’s not. It’s something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*pZLxT8C0Ungy9Ked" /><figcaption>A RAG prompt, courtesy of Andrei Bondarev</figcaption></figure><p><strong>RAG</strong> (<a href="https://cloud.google.com/use-cases/retrieval-augmented-generation"><strong>R</strong>etrieval-<strong>A</strong>ugmented <strong>G</strong>eneration</a>) is just another prompt, where you inject your context somewhere in the middle (hoping the LLM will prioritize that knowledge over the previous one). And yes, the three dashes are really important (since prompt are in plain English, and not in JSON/YAML/<a href="https://protobuf.dev/">protobuf</a>).</p><h4>What are we trying to solve?</h4><p><em>My problem is simple: I want to fetch my beloved Zurich lake water temperature; but hey, no API is available (no weather API for water temperature)!</em></p><p><strong>TL;DR </strong>Let’s say you you want to talk to a Website and ask a question.</p><ol><li>First you need to retrieve its content (curl/wget)</li><li>Then you want to inject this information into a prompt template.</li><li>Then use the LLM ability to summarize/infer useful information.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*tUNsbbRmRGfegj1TA2cH4w.png" /><figcaption>A high level diagram</figcaption></figure><p>I’m a swimmer and I love swimming in the lake in summer. However, water temperature is not advertised as well as air temperature via APIs. You have a bunch of German websites with some tables which change every year — so it doesn’t seem smart to build a proper parser there. I’ll let the LLM handle the complexity.</p><p>A simple googling of “<a href="https://www.google.com/search?q=zurich+see+wasser+temperatur"><em>zurich see wasser temperatur</em></a>” fetches some websites:</p><ul><li><a href="https://www.bodenseee.net/wassertemperatur/zuerichsee/">https://www.bodenseee.net/wassertemperatur/zuerichsee/</a></li><li><a href="https://www.badi-info.ch/_temp/zuerichsee-temperatur.htm">https://www.badi-info.ch/_temp/zuerichsee-temperatur.htm</a></li><li><a href="https://www.zh.ch/de/umwelt-tiere/wasser-gewaesser/messdaten/wassertemperaturen.html">https://www.zh.ch/de/umwelt-tiere/wasser-gewaesser/messdaten/wassertemperaturen.html</a></li></ul><p>You don’t speak German? Welcome to my world!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/886/1*wPBSVZUUaFifvYxz_umYDA.png" /><figcaption>Detecting temperature from a picture? I like your thinking! That’s what <strong>Gemini 1.5</strong> excels at!</figcaption></figure><p>My favourite “<em>badis</em>” (Swiss term for <em>lido</em>) which are close to my home are Seebad Enge (with fancy and elegant vibe, evening party, .. opens at 8am) and Seebad Utoquai (for Ironmen and grannies, opens at 7am). They’re in front of each other but, due to current, they often have 1°C difference (~half 1°F if you insist with that imperial nonsense).</p><h4>Prerequisites and installation: Ollama and Gemma</h4><p>To run this, I will not use a Google Cloud product, for once, I’ll just use:</p><ul><li><a href="https://ai.google.dev/gemma"><strong>Gemma</strong></a><strong> 7B (</strong><a href="https://ai.google.dev/gemma">https://ai.google.dev/gemma</a><strong>)</strong>, Google’s open model.</li><li><strong>Ollama</strong> (<a href="https://ollama.com/">https://ollama.com/</a>) as a conveniente package manager</li></ul><p>I’ve tried Ollama on a long intercontinental flight to the Philippines and it changed my life: <strong>an LLM running in localhost with no internet connection?!?</strong> Sign me up for this! And you can get open models from Facebook, Google, Microsoft, Mistral, OpenAI, .. I also love to create cheap embeddings with a model like <a href="https://ollama.com/library/nomic-embed-text">nomic-embed-text</a> , my favorite.</p><ul><li>Download and install ollama for your OS (instructions in <a href="https://ollama.com/download">https://ollama.com/download</a>)</li><li>Download gemma: ollama pull gemma</li><li>Clone my code: git clone https://github.com/palladius/genai-googlecloud-scripts</li><li>enter the <strong>15-ollama-gemma-RAG-curl-ruby/ </strong>folder.</li></ul><p>And you’re good to go!</p><h4>The prompt</h4><p>So here’s a prompt I refined after some trial and error (<a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/15-ollama-gemma-RAG-curl-ruby/wasser-temperatur-rag.prompt.erb">wasser-temperatur-rag.prompt.erb</a>):</p><pre># Note this code is ruby ERB (the ruby equivalent of python&#39;s Jinja)<br>Can you please tell me the Water Temperature of Seebad Enge and Seebad Utoquai from this doc?<br>I&#39;ll attach a document I just downloaded from the internet with current temperatures as of<br>&lt;%= date_today %&gt;.<br><br>=== Website curl ===<br><br>Here are the real temperatures:<br><br>&lt;%= rag_from_website %&gt;<br><br>=== Sample answer ===<br><br>Answer should be in JSON, something like:<br><br>{<br>     &quot;Seebad Enge&quot;: &quot;..&quot; ,<br>     &quot;Seebad Utoquai&quot;: &quot;..&quot;<br>}<br><br>=== Your answer ===<br><br>Your JSON answer (make sure to subsitute temperature with intefers you got from the Website Curl, also avoid the ```json``` part since its redundant):</pre><h4>The code</h4><p>I created some simple curl wrapper in Ruby 💎 (you can of course use your own favorite language1 It’s so small and simple you won’t be able to resist porting in your fav language!) in <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/15-ollama-gemma-RAG-curl-ruby/curlit.rb">curlit.rb</a>.</p><pre># More details here: https://github.com/palladius/genai-googlecloud-scripts/blob/main/15-ollama-gemma-RAG-curl-ruby/wasser-temperatur-rag.rb<br><br>def main(verbose: true)<br>  # 1. get output frm website<br>  rag_content = curlit(url: &#39;https://www.stadt-zuerich.ch/ssd/de/index/sport/schwimmen/wassertemperaturen.html&#39;)<br>  # 2. renders the prompt with this information<br>  rendered_output = substitute_with_rag(template_path: &#39;wasser-temperatur-rag.prompt.erb&#39;, rag_content:)<br>  # 3. Calling Ollama takes a while, better to tell the user they&#39;ll have to wait a bit<br>  puts &quot;⌛ Now lets wait for gemma to process it.. popen&quot; if verbose<br>  # 4. why piping in bash when you can do it natively in ruby and manage errors here?<br>  json_output = pipe_into_gemma(rendered_output:)<br>  # 5. Save onto JSON -&gt; see<br>  save_sanitized_output_as_json(json_output:, file_name: &#39;output.json&#39;)<br>end</pre><p>Here’s how the execution looks like for./wasser-temperatur-rag.rb :</p><pre>ricc@derek:🏡~/genai-googlecloud-scripts/15-ollama-gemma-RAG-curl-ruby$ ./wasser-temperatur-rag.rb<br>⌛ Now lets wait for gemma to process it.. popen<br>{<br>     &quot;Seebad Enge&quot;: &quot;18.5°C&quot;,<br>     &quot;Seebad Utoquai&quot;: &quot;18°C&quot;<br>}</pre><p>Is it correct? Let’s check:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/848/1*LiW6lnNdpL-HgTFlHal41Q.png" /><figcaption>Screenshot taken a few minutes after the code was executed on 2024–06–02: <a href="https://www.stadt-zuerich.ch/ssd/de/index/sport/schwimmen/wassertemperaturen.html">https://www.stadt-zuerich.ch/ssd/de/index/sport/schwimmen/wassertemperaturen.html</a></figcaption></figure><p>👍 As you can see the output is as I expected. Note that if you prefer Fahrenheit, it’s a trivial change to the prompt! remember:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/477/0*VR1dJz3pPYFlpYRU" /><figcaption>IMHO, this sums up the AI revolution!</figcaption></figure><h4>This is too complicated! You promised me a one-liner!</h4><p>So you’re a lazy developer! I like you, we should be friends!</p><p>RAG can be as simple as Retrieve and Ask a question, so it can becomes as simple as: curl website | ollama run gemma &quot;Ask a Question&quot;:</p><pre># See Makefile for more exmaples<br>$ ./curlit.rb https://www.boot24.ch/chde/service/temperaturen/zugersee/ | ollama run gemma Tell me the current water temperature of Zuger See<br><br>The current water temperature of Zuger See is **17°C**.</pre><p>I would have broken it down to two lines for readability but — a challenge is a challenge! 😃</p><p>Wait a minute — is it really 17°C? Or did they just hallucinate?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/942/1*J-ETdtoTolgmL_8aWan-cA.png" /><figcaption>The Zugersee water temperature today</figcaption></figure><p>Yup, seems like <strong>17°C</strong>! And TA-DA!</p><h4>📚 More readings</h4><ul><li>Code of this article: <a href="https://github.com/palladius/genai-googlecloud-scripts/tree/main/15-ollama-gemma-RAG-curl-ruby">https://github.com/palladius/genai-googlecloud-scripts/tree/main/15-ollama-gemma-RAG-curl-ruby</a></li><li>My Gemini News Crawler full-fledged RAG code: <a href="https://github.com/palladius/gemini-news-crawler?tab=readme-ov-file#bibliography">https://github.com/palladius/gemini-news-crawler</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=de69215d43df" width="1" height="1" alt=""><hr><p><a href="https://blog.devops.dev/comand-line-rag-with-ruby-bash-and-gemma-curling-a-website-without-apis-de69215d43df">RAG one-liners: curling a website with Gemma</a> was originally published in <a href="https://blog.devops.dev">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gemma is born!]]></title>
            <link>https://medium.com/google-cloud/gemma-is-born-c5ea9ba576ec?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/c5ea9ba576ec</guid>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[gemma]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[curl]]></category>
            <category><![CDATA[vertex-ai]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Mon, 26 Feb 2024 16:23:09 GMT</pubDate>
            <atom:updated>2024-03-05T15:38:18.048Z</atom:updated>
            <content:encoded><![CDATA[<p>As a rubyist, I love gems.</p><p>So imagine my delight and surprise when last week <a href="https://blog.google/technology/developers/gemma-open-models/">Google announced <strong>Gemma</strong></a>, a family of open models available directly on `Kaggle`: <a href="https://www.kaggle.com/models/google/gemma">google/gemma</a>. Plus, it’s <em>free</em>!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/925/1*zktJLAqzgGa4ISoynpyMSQ.jpeg" /><figcaption>Gemma is born!</figcaption></figure><h4>But I know nothing about ML and Kaggle!</h4><p>If you’re like me, a CLI kind of person, fear no more! I found a way to call Gemma with cURL (<a href="https://www.youtube.com/watch?v=1ZXHsNqkDI4">“if you can curl it, you can call it in any language!”</a> — said a wise man in Dodgeball — did he?).</p><p>Don’t believe me? Check out my ugly bash code here: <a href="https://github.com/palladius/genai-googlecloud-scripts/tree/main/10-gemma-is-born">https://github.com/palladius/genai-googlecloud-scripts/tree/main/10-gemma-is-born</a>/</p><h4>How do I install Gemma locally?</h4><p>I haven’t tried that one out, I’m sorry. It’s in my todo list.</p><h4>How do I install Gemma in the Cloud?</h4><p>As Barney would say <em>“Glad you asked!”. </em>I got hooked by <a href="https://www.youtube.com/watch?v=BM3wzKSPOoI">this great video</a> by Mark Ryan which got me started.</p><p>Please note that in this case you need <a href="https://cloud.google.com/docs/get-started">access to Google Cloud</a> and have billing enabled. You need:<br>1. A Gmail account (Google Account)<br>2. A Google Cloud Project with <a href="https://cloud.google.com/billing/docs/how-to/modify-project">billing enabled</a>.</p><p>If this doesn’t scare you off, the easiest way is to:</p><ol><li>Click on <a href="https://www.kaggle.com/models/google/gemma">https://www.kaggle.com/models/google/gemma</a></li><li>Click on <a href="https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/335">Gemma on Vertex Model Garden</a> in that page.</li><li>Follow instructions.</li></ol><p>Once done, you should have something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jucMU_v822feb70TLKSDBw.png" /><figcaption>Gemma has been installed</figcaption></figure><h4>Ok, so what now? How do I interact with Gemma?</h4><p>Glad you asked!</p><ul><li>Click on the model (blue line above).</li><li>Under “Deploy and Test” tab you should see an awesome “Test your model ”. It accepts a JSON.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qGEh59zcn_abB4XBA9Ossg.png" /></figure><p>It took me one hour of digging but I can tell you, the JSON can be as simple as this:</p><pre>{<br>  &quot;instances&quot;: [{<br>    &quot;prompt&quot;: &quot;What&#39;s the difference between a city bike and a racing bike?&quot;,<br>    &quot;max_tokens&quot;: 1000<br>  }]<br>}</pre><p>The output will look like this:</p><pre>{<br>  &quot;predictions&quot;: [<br>    &quot;.. GEMMA_ANSWER_HERE ...&quot;<br>  ],<br>  &quot;deployedModelId&quot;: &quot;6852805176160419840&quot;,<br>  &quot;model&quot;: &quot;projects/980606839737/locations/us-central1/models/google_gemma-7b-it-1708849093570&quot;,<br>  &quot;modelDisplayName&quot;: &quot;google_gemma-7b-it-1708849093570&quot;,<br>  &quot;modelVersionId&quot;: &quot;1&quot;<br>}</pre><p>So writing a shell wrapper is as easy as cURLplus ajq(latest code <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/10-gemma-is-born/gemma-hello.sh">here</a>):</p><pre># You just change these to your model_id and your project_id<br>ENDPOINT_ID=&quot;6294864597715255296&quot;<br>PROJECT_NUMBER=&quot;980606839737&quot;<br># this contains the question<br>INPUT_DATA_FILE=&quot;gemma-input-hello.json&quot;<br># this contains the answer (not really needed but good for training purposes)<br>OUTPUT_DATA_FILE=&quot;gemma-output-hello.json&quot;<br><br>curl \<br>    -X POST \<br>    -H &quot;Authorization: Bearer $(gcloud auth print-access-token)&quot; \<br>    -H &quot;Content-Type: application/json&quot; \<br>    https://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_NUMBER}/locations/us-central1/endpoints/${ENDPOINT_ID}:predict \<br>    -d &quot;@${INPUT_DATA_FILE}&quot; | tee &quot;$OUTPUT_DATA_FILE&quot;<br><br>PREDICTION=$(cat &quot;$OUTPUT_DATA_FILE&quot; | jq .predictions[0])<br><br>echo -en &quot;$PREDICTION\n&quot;</pre><h4>Conclusions</h4><p>Deploying Gemma to Vertex AI and calling the model via curl is a <em>breeze</em>.</p><p>And you, what are you waiting for?</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c5ea9ba576ec" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/gemma-is-born-c5ea9ba576ec">Gemma is born!</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hey Gemini, explain me these pictures — in bash ‍]]></title>
            <link>https://blog.devops.dev/hey-gemini-explain-me-these-pictures-in-bash-06c03d0d0512?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/06c03d0d0512</guid>
            <category><![CDATA[bash]]></category>
            <category><![CDATA[gemini]]></category>
            <category><![CDATA[curl]]></category>
            <category><![CDATA[genai]]></category>
            <category><![CDATA[google]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Thu, 14 Dec 2023 15:16:16 GMT</pubDate>
            <atom:updated>2023-12-21T17:23:54.037Z</atom:updated>
            <content:encoded><![CDATA[<h3>Hey Gemini, explain me these pictures — in bash 🧑🏽‍💻</h3><p><a href="https://www.youtube.com/watch?v=jV1vkHv4zq8"><strong>Gemini</strong> is finally out</a>!</p><p>And… it’s <strong>multimodal</strong>! Which means, you can use both images and text to ask for questions (the output is only text — for now 😉).</p><p>Note: all the code snippets (and images) in here are available in my <a href="https://github.com/palladius/genai-googlecloud-scripts/tree/main/07-bash-gemini-multimodal-jam"><strong>GitHub repo</strong></a>.</p><p>Let’s get started!</p><h3>Hey Gemini, describe what you see..</h3><p>Let’s start by an album by my favourite band:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/536/0*gbubXqodziySrF_A" /><figcaption>One of my favourite albums of all time — will Gemini recognize it?</figcaption></figure><pre>$ ./gemini-generic.sh images/genesis-selling-england.jpg Describe what you see<br># 🤌  QUESTION: Describe what you see<br># 🌡️ TEMPERATURE: 0.2 <br># 👀 Examining image images/genesis-selling-england.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, baseline, precision 8, 536x528, components 3. <br># ♊ Gemini no Saga answer for you:<br>The cover of Genesis album Selling England by the Pound features a painting <br>by British artist Paul Whitehead. The painting depicts a group of people in <br>a park, with a man sleeping on a bench in the foreground. The people are all<br>wearing clothes from the 1920s or 1930s, and the painting has a nostalgic, <br>almost surreal feel to it. The colors are muted and the figures are slightly <br>blurred, which gives the painting a dreamlike quality. The painting is also <br>full of symbolism, with the sleeping man representing England and the people <br>around him representing the different aspects of English society. The painting<br>has been interpreted in many different ways, but it is generally seen as a<br>commentary on the state of England in the 1970s.</pre><p><em>♊ The cover of Genesis’ album Selling England by the Pound features a painting by British artist Paul Whitehead. The painting depicts a group of people in a park, with a man sleeping on a bench in the foreground. The people are all wearing clothes from the 1920s or 1930s, and the painting has a nostalgic, almost surreal feel to it. The colors are muted and the figures are slightly blurred, which gives the painting a dreamlike quality. The painting is also full of symbolism, with the sleeping man representing England and the people around him representing the different aspects of English society. The painting has been interpreted in many different ways, but it is generally seen as a commentary on the state of England in the 1970s.</em></p><p>A quick googling confirms that <a href="https://en.wikipedia.org/wiki/Paul_Whitehead">Paul Whitehead</a> actually covered one of my favourite album of all times. If you love Genesis too and want to see me play Firth of Fifth, please check <a href="https://www.youtube.com/watch?v=4VBxd9n1dSU">my youtube video.</a></p><p>Let’s try this cat now:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/320/0*maiP4twRlm4le8Qx" /><figcaption>This is a cat from Google sample images</figcaption></figure><p><strong>Gemini</strong>: A cat is walking in the snow. The cat is brown and white and has a long tail. The cat is looking at the camera. The snow is white and is covering the ground.</p><h4>How did I do it?</h4><p>If you check my bash script (<a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/07-bash-gemini-multimodal-jam/gemini-generic.sh">gemini-generic.sh</a>), you can see the request looks like this:</p><pre>data=$(_base64_encode_mac_or_linux &quot;$IMAGE&quot;) # Mac or Linux should both work!<br># ...<br>cat &gt; &quot;$REQUEST_FILE&quot; &lt;&lt;EOF<br>{&#39;contents&#39;: {<br>      &#39;role&#39;: &#39;USER&#39;,<br>      &#39;parts&#39;: [<br>        {&#39;text&#39;: &#39;$QUESTION&#39;},<br>        {&#39;inline_data&#39;: {<br>            &#39;data&#39;: &#39;$data&#39;,<br>            &#39;mime_type&#39;:&#39;image/jpeg&#39;}}]<br>    }<br><br>}<br>EOF</pre><p>The hardest part is actually the base64conversion, and making it work both on my Mac and on my Linux (as our grand-parents say in Italy <em>“You wanted </em><em>/bin/bash.? Now you pedal!”</em>).</p><h4>An Italian image, explained in Italian</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/926/0*KyG34HB0fyBRdHH8" /><figcaption>The city of XXX, in Italy. Seen from the YYY palace (surprise!). Picture from my colleague Daria.</figcaption></figure><pre>./gemini-explain-image.sh images/italian-town.jpg<br>[..]<br> This is a view of the city of Trento, Italy from the Buonconsiglio Castle.</pre><p><strong>Gemini (</strong><em>🇬🇧</em><strong>): </strong><em>This is a view of the city of Trento, Italy from the Buonconsiglio Castle.</em></p><p>Let’s ask the same in Italian:</p><pre>$ GENERATE_MP3=true ./gemini-explain-image-italian.sh images/italian-town.jpg<br># 🤌  QUESTION: Descrivimi cosa vedi in questa immagine<br># 🌡️  TEMPERATURE: 0.2<br># 👀 Examining image images/italian-town.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, Exif Standard: [TIFF image data, little-endian, direntries=1, software=Google], baseline, precision 8, 926x1230, components 3.<br># ♊ Gemini no Saga answer for you:<br> La foto mostra una loggia con delle colonne in pietra che incorniciano la vista di una città.<br> La città è circondata da montagne e si possono vedere i tetti delle case e le torri delle chiese.<br> Il cielo è azzurro e ci sono delle nuvole bianche.<br># TTS_LANG: it-IT<br>Written .tmp.tts-output.json. curl_ret=0<br>t.audio.encoded: ASCII text, with very long lines (65536), with no line terminators<br>t.mp3:           MPEG ADTS, layer III, v2,  32 kbps, 24 kHz, Monaural<br>t.mp3: MPEG ADTS, layer III, v2,  32 kbps, 24 kHz, Monaural<br>All good. MP3 created: &#39;t.La foto mostra una loggia con delle colonne in pie.mp3&#39;</pre><p>Gemini (🇮🇹): <em>La foto mostra una loggia con delle colonne in pietra che incorniciano la vista di una città. La città è circondata da montagne e si possono vedere i tetti delle case e le torri delle chiese. Il cielo è azzurro e ci sono delle nuvole bianche.</em></p><p>As you see, Italian is more verbose (my wife says the same about me!) but it’s not aware of the <a href="https://www.buonconsiglio.it/">Buonconsiglio Palace</a>. Interesting! I presume the Italian model has less training material to learn from than the English one.</p><p>Makes sense.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*kM6xWj1LtmR46I0q" /><figcaption>Btw, I highly recommend Trento, I was cycling around there: great views and great wines!</figcaption></figure><h4>Comparing two images</h4><p>How about comparing two images?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/786/1*yiGN2IyD-eaLglpR63_Krw.png" /><figcaption>Gemini constellation vs Saint Seiya’s Gemini saint.</figcaption></figure><p>Some sample code is in my Makefile for convenience. try this:</p><pre>ricc@derek:~/git/genai-googlecloud-scripts/07-bash-gemini-multimodal-jam$ 🐼 !mak<br>make compare-two-geminis <br>./gemini-generic-two-pics.sh  images/gemini-constellation.png   images/saga-blue-hair.jpg<br>♊️ Question: Can you highlight similarity and differences between the two? Also, do you recognize the same person in both of them?<br> 👀 Examining image1 images/gemini-constellation.png: images/gemini-constellation.png: PNG image data, 1675 x 1302, 8-bit/color RGBA, non-interlaced. <br> 👀 Examining image2 images/saga-blue-hair.jpg: images/saga-blue-hair.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 193x261, components 3. <br>♊️ Describing attached image:<br> The two images are of the constellation Gemini and the anime character Gemini Saga. The constellation is said to represent the twins Castor and Pollux, while the character Gemini Saga is a Gemini Saint in the anime series Saint Seiya. Both images depict two figures that are connected to each other. The constellation is made up of stars, while the character is a human.</pre><p><strong>♊ Response</strong>: ️ <em>The two images are of the constellation Gemini and the anime character Gemini Saga. The constellation is said to represent the twins Castor and Pollux, while the character Gemini Saga is a Gemini Saint in the anime series Saint Seiya. Both images depict two figures that are connected to each other. The constellation is made up of stars, while the character is a human.</em></p><p>Today we’ve learnt something we certainly didn’t know: a constellation is made of stars, while the guy on the right is human 😃</p><h4>Introducing Audio!</h4><p>Why don’t we throw some audio in the mix?</p><p>I’ve added a tts.sh , which creates an MP3 out of an english (or Italian!) text given in ARGV. Convenient uh?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-QOBFPt1GsVq2LVK" /><figcaption>My kids beside American Santa Klaus (we live in Zurich, there’s a Santa for every language and ethnicity!)</figcaption></figure><p>A few weeks ago my kids went to visit Santa Klaus.. the American Santa — they’ll tell you there’s another who speaks German instead, he’s called <em>Samiklaus</em>, they still can’t decide if its the same guy — my kids are X and Y year old; how old? Let’s ask Gemini!</p><pre>$ make age-test<br># equivalent to:<br>$ GENERATE_MP3=true ./gemini-generic.sh images/ricc-family-with-santa.jpg Tell me the age of the people you see, from left to right.<br># 🤌  QUESTION: Tell me the age of the people you see, from left to right.<br># 🌡️  TEMPERATURE: 0.2<br># 👀 Examining image images/ricc-family-with-santa.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, Exif Standard: [TIFF image data, little-endian, direntries=3, software=Google], baseline, precision 8, 1164x826, components 3.<br># ♊ Gemini no Saga answer for you:<br>1. 30-35<br>2. 2-3<br>3. 40-45<br>4. 2-3<br>5. 60-65<br>[..]<br>All good. MP3 created [..]</pre><p>Now I’m older than 40–45 (46) so technically speaking this is a mistake, but as a human interaction I will consider it as a success 😉</p><p>Now this is not the best of MP3s, but it works! Check out <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/07-bash-gemini-multimodal-jam/images/ricc-family-with-santa.jpg.mp3">ricc-family-with-santa.jpg.mp3</a>.</p><p>You can also find Trento in Italian here: <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/07-bash-gemini-multimodal-jam/images/italian-town.jpg.mp3">italian-town.jpg.mp3</a>.</p><h4>Something useful now: understand a diagram!</h4><p>A colleague told me yesterday: the power of Gemini is that not only “he” understands text and images, also the very complex relationship between items in a diagram. This morning my Accrux earphones wouldn’t work, so I decided to understand how they work. I downloaded the <a href="https://raw.githubusercontent.com/palladius/genai-googlecloud-scripts/main/07-bash-gemini-multimodal-jam/images/instruction-manuals/Acrux-User-Manual-4700503.pdf">User Manual</a>, uploaded to Gemini <a href="https://raw.githubusercontent.com/palladius/genai-googlecloud-scripts/main/07-bash-gemini-multimodal-jam/images/instruction-manuals/Acrux-User-Manual-4700503.png">as image</a>, and asked Gemini a few questions.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*hfF-icWAS9U4T30e.png" /><figcaption>I’m not so young anymore so I can’t read this unless it’s printed on A3. And I respect Amazon too much!</figcaption></figure><p>From UI, this is <em>easy peasy</em>. Upload image and ask question:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/612/0*TXJPDl-xEJFt6FEL" /></figure><p>And what about bash? Let’s do the same from CLI:</p><pre>$ make read-instruction-manual-for-me <br>[..]<br>./gemini-generic.sh images/instruction-manuals/Acrux-User-Manual-4700503.png &#39;1. How do i TURN it on? 2. Where is the power button located? 3. Is this the one called ANC?&#39;<br># 🤌  QUESTION: 1. How do i TURN it on? 2. Where is the power button located? 3. Is this the one called ANC?<br># 🌡️  TEMPERATURE: 0.2 <br># 👀 Examining image images/instruction-manuals/Acrux-User-Manual-4700503.png: PNG image data, 1664 x 929, 8-bit/color RGBA, non-interlaced. <br># ♊ Gemini no Saga answer for you:<br>1. Long press the power button for 2 seconds.<br>2. The power button is located on the right earcup.<br>3. Yes, this is the one called ANC.<br># Note: No mp3 file generated (use GENERATE_MP3=true to generate one)</pre><p>My question (I actually asked the questions one by one, so think of it as an avalanche-chat):</p><ol><li>How do i TURN it on?</li><li>Where is the power button located?</li><li>Is this the one called ANC?</li></ol><p># ♊ Gemini answer:<br><em>1. Long press the power button for 2 seconds.<br>2. The power button is located on the right earcup.<br>3. Yes, this is the one called ANC.</em></p><p>Bingo!</p><h4>An unexpected Games of Thrones plot twist</h4><p>This is the avatar I use in Google. I’m really curious to see what gemini can infer from here, also because I used some filters.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*w_qhJiiXjD2ZudEZ" /><figcaption>Riccardo in the Amsterdam office, a few years/kilos ago.</figcaption></figure><pre>$ ./gemini-explain-image.sh images/ricc-logo.png<br>[..]<br>This is a photo of a man standing behind a Google Cloud Platform cutout.<br>The man is smiling and wearing a shirt that says, “That’s what I do,<br>I drink and I know things.” The background is a brick wall with blue<br>and white accents.</pre><p><strong>♊ </strong>Gemini:<em> This is a photo of a man standing behind a Google Cloud Platform cutout. The man is smiling and wearing a shirt that says, “That’s what I do,<br>I drink and I know things.” The background is a brick wall with blue<br>and white accents.</em></p><p>And I thought! Of course, this is my favourite Games of Thrones t-shirt. Let’s see if he knows:</p><p><strong><em>Q: Do you recognize the quote in this person tshirt?</em></strong></p><pre>$ GENERATE_MP3=true ./gemini-generic.sh images/ricc-logo.png Do you recognize the quote in this person tshirt<br>[..]<br> &quot;That&#39;s what I do, I drink and I know things&quot; is a quote from the TV show Game of Thrones,<br> said by the character Tyrion Lannister.</pre><p><strong>♊ </strong>Response: <em>“That’s what I do, I drink and I know things” is a quote from the TV show Game of Thrones, said by the character Tyrion Lannister.</em></p><p>And you also have the MP3 if you wish: <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/07-bash-gemini-multimodal-jam/images/ricc-logo.png.mp3">images/ricc-logo.png.mp3</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*gz3JRSvt3G_-iDcm" /></figure><p><em>Chapeau</em>, Gemini!</p><h4>Conclusions</h4><p>Calling Gemini is easy, fun and powerful!</p><ul><li><strong>Easy</strong>. If you can invoke Gemini via curl, imagine how easy it is to invoke it with your favourite language! <a href="https://cloud.google.com/vertex-ai/docs/generative-ai/start/quickstarts/quickstart-multimodal"><strong>Try out our SDK</strong></a><strong> </strong>in Python, Node, Java, Go. For everything else there’s REST/cURL!</li><li><strong>Fun</strong>. look at how many use cases I’ve shown in this page: comparing two images, asking questions abuot an image, a writing, age of people, .. possibilities are endless.</li><li><strong>Powerful</strong>. Multi-modal is a game changer. And for what I hear, <em>more modes are coming</em>. 😉</li></ul><p>Did you like this? Want more of this? Write it in the comments!</p><p>Riccardo</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=06c03d0d0512" width="1" height="1" alt=""><hr><p><a href="https://blog.devops.dev/hey-gemini-explain-me-these-pictures-in-bash-06c03d0d0512">Hey Gemini, explain me these pictures — in bash 🧑🏽‍💻</a> was originally published in <a href="https://blog.devops.dev">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hey Bard, write a responsive Javascript Search Engine app for me..]]></title>
            <link>https://medium.com/@palladiusbonton/hey-bard-write-a-responsive-javascript-search-engine-app-for-me-b2585e55385e?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/b2585e55385e</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[bard-ai]]></category>
            <category><![CDATA[google-cloud-run]]></category>
            <category><![CDATA[search]]></category>
            <category><![CDATA[json]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Mon, 20 Nov 2023 14:01:41 GMT</pubDate>
            <atom:updated>2023-12-19T10:11:19.056Z</atom:updated>
            <cc:license>http://creativecommons.org/licenses/by/4.0/</cc:license>
            <content:encoded><![CDATA[<p>I suck at Javascript. 😒 It’s time to admit it. 😅 Let’s see how <strong>Bard</strong> helped me overcome this limitation… and create <a href="https://js-simple-search-bsl7ylv4hq-ew.a.run.app/">this app</a>!</p><p>I tried for years to cope and survive in a world which seems to be unable to exist without Javascript, and last weekend I succumbed. Time to ask your favorite JS developer <a href="https://medium.com/@ch.stanger">Chris</a> to point you at some good documentation and start reading about this weird language.</p><p><strong><em>Promises, promises…</em></strong> unless? Wait, what if an <strong>LLM</strong> could code the app for me? Maybe I’m not good to start the project myself, but what if <a href="https://bard.google.com/">Bard</a> can do it for me, I should be able to tweak the code myself.</p><p><strong>TL;DR</strong> If you don’t want to read my Italian drama, <a href="https://github.com/palladius/js-simple-seach">jump to the code</a> (or see the <a href="https://js-simple-search-bsl7ylv4hq-ew.a.run.app/">result on Cloud Run</a>).</p><p>Two days ago, I was babysitting my kids; playing with my mobile phone while they were playing with Lego…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*GRWdYdfz_8efocft" /><figcaption>Little Seby in the Lego room in Google Zurich</figcaption></figure><p>.. and I started asking Bard a question. But wait, <em>“how do I make sure the question remains available when I go back home to my big computer?”</em> I was quite surprised by the answer.</p><h4>The Coding concept</h4><p>What’s my idea? Say <strong>you have a gazillion articles / assets and want to be fast at searching on them</strong>. But you can’t accept a 1–2 seconds latency from a typical server-side website search.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/970/0*hWAdQ_6qqfONWXn1" /><figcaption>Flash is searching through all my docs ina static, local <em>JSON</em>! Barry likes to win easy :)</figcaption></figure><p>I want a search bar where I can start typing stuff and the choice starts to diminish. Then I want to have a number of cards with the results (from a static JSON — I’ll make it dynamic in a next episode!). I also want to have some rudimental clicking to narrow down the choice, say with a Boolean “is this a technical article).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*_glEQUM0vp5CBAJ_" /><figcaption>A quick and customizable search bar.</figcaption></figure><h4>Write a good prompt</h4><p>My kids are delving into plenty of Legos, so I have plenty of time to try a verbose and well planned prompt. After all, I want it to write an app for me! Let’s not save time and details.</p><p>Prompt 1: “<strong><em>I would like to build a small and responsive search engine. The DB Is small and static so I don’t need anything complicated. I just want to have a frontend JavaScript where you start typing a word and it searches for all the elements matching this word in title or description. The only important thing to me is responsiveness so every time you type a letter it starts selecting just things matching it, so you want to write say “pistachio”, the selection should start kicking in already with ‘p’, ‘pi’, ‘pis’, and so on. Can you help me write the code?</em></strong>”</p><p>I’m so ignorant on JS that I’m not even sure this is something you can do fully on client-side ( index.html+ script.js) or if you need some server-side effort (add node.jsto the mix) to provide the JSON (although on the server-side I have 20-year expertise — this part I can do without help).</p><h4>Bard reply might surprise you..</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aZIktNHDSVE0nl-MhdHkPw.png" /><figcaption>Bard answer</figcaption></figure><p>Now, Bard started with a confident “<em>Sure, here’s the JavaScript code for a small and responsive search engine that works with a static database:</em>” but I don’t trust what I see. Plus, I don’t have a computer with me, so I can’t try the code. I asked him to do two things that Google is really good at doing:</p><ul><li>export in email (cheap / persistent)</li><li>export to <a href="https://docs.google.com/document/d/1y75TsYpu9kr3vh0zEEoq-IpBTfmbJ77fsISVKbHsRRU/edit">GDoc</a> (richer / can edit)</li></ul><p>Look:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7AU7_E2Wql-JTjPmC8Zz-A.png" /><figcaption><strong>Bard</strong> exports to <strong>GDocs</strong> and <strong>GMail</strong> in case you want to elaborate on your brainstorming idea.</figcaption></figure><p>When I was home I had plenty to choose from: my 📬 GMail inbox, my 📃 Google Docs link. what I didn’t know is that the conversation is saved conveniently in a top left tab, and you can pin it — until you’re done with your project.</p><p>I paste the JS / HTML code and… it works FROM SCRATCH! Teh first tentative works! Wow I’m impressed. I start putting the <a href="https://github.com/palladius/js-simple-search">code into github</a> for posterity and for making potentially breaking changes.</p><h4>Let’s add complexity. Add a Boolean and multi-parameter search!</h4><p>Prompt2. “<strong><em>Wow! Say I want to do something a bit more complex for example selecting a Boolean (isTechnical=true/false) which is in the frontend as checkbox and in the JSON, and I want to sort the result by some kind of rating? Can you help me add those two functionalities both to html and to JavaScript?”</em></strong></p><p>Result:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/916/1*LqieYZJOw5dEYrNiyER7pA.png" /><figcaption>The result is impeccable — except with the <em>Pasta Primavera</em> which definitely not 🇮🇹-compliant!</figcaption></figure><p>Note that Bard gives me the index.html code, the script.jscode , and also a pre-baked JSON which responds to my requirements (a isTechnical boolean and a float rating).</p><h4>Add little nits: CSS and Cards</h4><p>Prompt 3. <strong>Wow this is amazing! Final thing, can you share a little css snippet to make this look nice and professional? I’m bad at CSS.</strong></p><p>This made the final visualization a bit better (not much).</p><p>Prompt 4. <strong><em>Fantastic! Last thing. I would like to visualize the search result as nicely formatted cards, think of three rectangles per row, with title description and maybe a small image turned into a square with rounded corners. Can you help me with html and CSS?</em></strong></p><p>And this is the first time Bard makes a mistake. He gives me a HTML code which seems like <a href="https://angular.io/api/common/NgFor">Angular</a> (ngFor ):</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/940/1*CsYSrgiS7TedB28Xt-7atw.png" /><figcaption>This is a mistake: `ngFor` only exists in <a href="https://angular.io/api/common/NgFor">Angular</a> framework (I presume?)</figcaption></figure><h4>Result</h4><p>The app is currently served by cloud run here: <a href="https://js-simple-search-bsl7ylv4hq-ew.a.run.app/">https://js-simple-search-bsl7ylv4hq-ew.a.run.app/</a></p><p>This is the final result in GIF format:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*D8xzbhzjBKZkjsvU.gif" /></figure><p>The functionalities it demonstrates are:</p><ul><li>responsive sub-JSON search function (every letter triggers a search on <em>Title</em> or <em>Description</em>)</li><li>boolean selection (isTechnical or not)</li><li>Sort by <em>rating</em> (number) or by <em>Title</em> (string)</li></ul><h4>Conclusions</h4><p>As a person who can’t even code a strlen() in Javascript, I was able to create a simple / dumb — yet customized — website <strong>within an hour</strong> on a Saturday afternoon (when my wife was babysitting).</p><p><a href="https://bard.google.com/">bard.google.com</a> gave me good code from the beginning, and responded correctly to the next 2 questions. The first error was at the 4th prompt (!). Also, on the negatives, the CSS for cards was pretty ugly so I had to fix it myself (luckily I speak some rudimental <a href="https://getbootstrap.com/docs/4.0/components/card/">Boostrap</a>).</p><p>I found Bard can be a pretty good companion if you have time to kill away from keyboard, and you want to go with the flow in some brainstorming phase, ready to copy the content when you’re back to your workstation.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b2585e55385e" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Insights on Medium articles with GenAI and Ruby!]]></title>
            <link>https://blog.devops.dev/parse-medium-articles-with-genai-and-add-some-fun-02fe9d30475a?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/02fe9d30475a</guid>
            <category><![CDATA[vertex-ai]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[medium]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[genai]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Thu, 16 Nov 2023 13:54:40 GMT</pubDate>
            <atom:updated>2023-11-22T18:34:15.863Z</atom:updated>
            <content:encoded><![CDATA[<h3>Automated insights on Medium articles with GenAI and Ruby!</h3><p>A few months ago my manager asked me to ramp up on GenAI. That was one of the best work days of my life! Google offers a lot of toys to play with, and it’s hard not to have fun. I’m fortunate enough to have a job I really love! But enough with my dramatic style, since <a href="https://cloud.google.com/vertex-ai/docs/generative-ai/start/quickstarts/api-quickstart"><strong>Vertex AI </strong></a>Palm API seems to think i’m a bit too Italian, look:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wnUNrC0-Mg0j5Hef0kJXqQ.png" /><figcaption><strong>“Riccardo has a flair for the dramatic”: </strong>Palm API seems to have a sense of humour!</figcaption></figure><p>This article will illustrate how to crawl someone’s Medium page, and use GenAI to build a JSON file which has a mix of the crawled information and some new information which Vertex AI’s text-bison was able to infer for us.</p><h4>The code</h4><p><strong>TL;DR</strong> If you want to delve into the code: <a href="https://github.com/palladius/genai-googlecloud-scripts/tree/main/03-ruby-medium-article-slurper">https://github.com/palladius/genai-googlecloud-scripts/tree/main/03-ruby-medium-article-slurper</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/949/0*Nq7afPB21pYiBnx5" /><figcaption>A Ruby crawler to find insights on Medium Articles</figcaption></figure><p>A Ruby crawler to find insights on Medium ArticlesMy script is simple: you give it a Medium handle (mine is “<em>palladiusbonton”</em>) and it will do two things:</p><ol><li>Parse the XML RSS feed from Medium (thanks for making it <em>curl</em>-able!) which provides a list of the latest (10?) articles by that person. [<a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/03-ruby-medium-article-slurper/inputs/medium-feed.palladiusbonton.xml">example</a>]</li><li>Extract some significant fields (title, body, date, keywords, ..) [<a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/03-ruby-medium-article-slurper/inputs/medium-latest-articles.palladiusbonton.txt">example</a>]</li><li>Paste those at the end of a convoluted <a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/03-ruby-medium-article-slurper/main.rb#L34-L93">GenAI <strong>prompt</strong></a>.</li><li>Call the <strong>Vertex AI</strong> Palm API to get an answer. [<a href="https://github.com/palladius/genai-googlecloud-scripts/blob/main/03-ruby-medium-article-slurper/outputs/medium-latest-articles.palladiusbonton.txt.json">sample</a>]</li></ol><p>What am I trying to prove? I’m trying to use an LLM for a few things:</p><ul><li><strong>Data Scraping.</strong> I can do this also in a deterministic way (with <a href="https://nokogiri.org/index.html">nokogiri</a>).</li><li><strong>Classification</strong>. I’m really playing with this a lot. I ask the system to <strong>rate</strong> articles from 1 to 10, and to tell whether they’re Google Cloud articles or not. I also ask it to infer author’s <strong>nationality</strong> and <strong>favorite languages.</strong></li><li><strong>Summarization</strong>. I get a small summary of each article, which is super useful.</li></ul><h4>Two prompts: Text and JSON</h4><p>This morning, my prompt looked like this:</p><pre>Prompt = &lt;&lt;-END_OF_PROMPT<br>Provide a summary for each of the following articles.<br><br>* Please write about the topics, the style, and rate the article from 1 to 10 in terms of accuracy or professionalism.<br>* Please also tell me, for each article, whether it talks about Google Cloud.<br>* Can you guess the nationality of the person (or geographic context of the article itself) writing all of these articles?<br>* If you can find any typos or visible mistakes, please write them down.<br><br>--<br><br>#{Medium content will be pasted here}<br><br>END_OF_PROMPT</pre><p>My colleague Marc C has showed me that genAI can do better — it can write a JSON for you, with very little guidance! Actually it’s probably better than a human to close parenthesis and double quotes :)</p><p>So after 3–4 hours of tinkering I got to this version:</p><pre><br>### PROMPT HISTORY<br># 1.6 16nov23 Removed typos from articles.<br># 1.5 16nov23 Added movie.<br># 1.4 16nov23 M oved from TXT to JSON!<br><br>PromptInJson = &lt;&lt;-END_OF_PROMPT<br>You are an avid article reader and summarizer. I&#39;m going to provide a list of articles for a single person and ask you to do this:<br><br>1. For each article, I&#39;m going to ask a number of per-article questions<br>2. Overall, I&#39;m going to ask questions about the author.<br><br>I&#39;m going to provide a JSON structure for the questions I ask. If you don&#39;t know some answer, feel free to leave NULL/empty values.<br><br>1. Per-article:<br><br>* Please write about the topics, the style, and rate the article from 1 to 10 in terms of accuracy or professionalism.<br>* Please also tell me, for each article, whether it talks about Google Cloud.<br>* For each article, capture the original title and please produce a short 300-500-character summary.<br>* What existing movie or book would this article remind you the most of? Try a guess, use your fantasy.<br><br>2. Overall (author):<br><br>* Extract name and surname<br>* Can you guess the nationality of the person (or geographic context of the article itself) writing all of these articles?<br>* Please describe this author style. Is it professional or more personal? Terse or verbose? ..<br>* Does this author prefer a certain language? In which language are their code snippets (if any)?<br>* If you can find any typos or recurring mistakes in any article, please write them here.<br><br>Please provide the output in a `JSON` file as an array of answer per article, like this:<br><br>{<br>    &quot;prompt_version&quot;: &quot;1.6a&quot;, // do NOT change this, take verbatim<br>    &quot;author_name&quot;: &quot;&quot;, // name and surname of the author<br>    &quot;author_nationality&quot;:  &quot;&quot;, // nationality here<br>    &quot;author_style&quot;: &quot;&quot;,  // overall author style: is it professional or more personal? Terse or verbose? ..<br>    &quot;author_favorite_languages&quot;: &quot;&quot;,  // which languages does the author use? Pascal? C++? Python? Java? Usa comma separated for the list.<br>    &quot;typos&quot;: [{ // array of mistakes or typos<br>            &quot;current&quot;: &quot;xxx&quot;, // typo or mistake<br>            &quot;correct&quot;: &quot;yyy&quot;,  // <br>        }],<br>    &quot;articles_feedback&quot;: [<br><br>        // article 1<br>        {<br>        &quot;title&quot;: &quot;&quot;,         // This should be the ORIGINAL article title, you should be able to extract it from the TITLE XML part, like &quot;&lt;title&gt;&lt;![CDATA[What is toilet papers right side?]]&gt;&lt;/title&gt;&quot;<br>        &quot;summary&quot;: &quot;...&quot;,    // This should be the article summary produced by you.<br>        &quot;publication_date&quot;: &quot;&quot; // This should be provided to you in input<br>        &quot;accuracy&quot;: XXX,     // Integer 1 to 10<br>        &quot;is_gcp&quot;:   false,   // boolean, true of false<br>        &quot;movie_or_book&quot;: &quot;&quot;   // string, a book or film this article content reminds you of.<br>        ] <br>    },<br><br>        // Article 2, and so on..<br>    ]<br>}<br><br>Make **ABSOLUTELY SURE** the result is valid JSON or I&#39;ll have to drop the result.<br><br>Here are the articles:<br><br>--<br><br>END_OF_PROMPT</pre><p>I’ve been playing around with the structure a lot: what pertains to the single article, what with the global part (author identity / style)?</p><h4>Hey, we want some action!</h4><p>Sure, here you are! Let’s look setp by step the output from the <strong>Ruby crawler </strong>and comment on it:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/949/0*k25ajaAGq6ruaS2O" /><figcaption>Typical Ruby crawler, in Nokogiri</figcaption></figure><h4>Phase 1 — download the XML.</h4><p>First, curl this XML: <a href="https://medium.com/feed/@palladiusbonton">https://medium.com/feed/@palladiusbonton</a> . Results looks like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/608/1*1TOI6AooifViF0eP-0YbkA.png" /><figcaption>Zooming on a single article (XML RSS Feed)</figcaption></figure><p>XML looks like this, so far so good.</p><h4>Phase 2 — psarse the XML wityh Nokogiri</h4><p>For each item, I scrape things I care about. Probably I could have it just infer automatically, but it’s little effort, so why not! I’t just about finding the fields you care about:</p><ul><li>iterate through item</li><li>Per item, extract what you want: title , dc:creator, link , pubDate , ..</li></ul><p>The heavy lifting is done by <a href="https://nokogiri.org/index.html">nokogiri</a>, which is a <strong>real 💎</strong> gem among Ruby gems; no, it’s not a repetition, it’s just a double gem. Pythonists and Javascriptists, I wish you had it in your language too 😜</p><pre># Code: https://github.com/palladius/genai-googlecloud-scripts/blob/main/03-ruby-medium-article-slurper/main.rb#L120-L141<br>File.open(genai_input_filename, &#39;w&#39;) do |file| # file.write(&quot;your text&quot;) }<br>        ## Version 2: Scrape more important metadatsa<br>        docSM.xpath(&quot;//item&quot;).each_with_index do |node,ix| # Article<br>            file.writeln &quot;\n====== Article #{ix+1} =====&quot;<br>            title = node.xpath(&quot;title&quot;).inner_text<br>            creator = node.xpath(&quot;dc:creator&quot;).inner_text<br>            url =  node.xpath(&quot;link&quot;).inner_text<br>            pubDate =  node.xpath(&quot;pubDate&quot;).inner_text<br>            categories =  node.xpath(&quot;category&quot;).map{|c| c.inner_text}  # there&#39;s many, eg:  [&quot;cycling&quot;, &quot;google-forms&quot;, &quot;data-studio&quot;, &quot;pivot&quot;, &quot;google-sheets&quot;]<br>            article_content = ActionView::Base.full_sanitizer.sanitize(node.inner_text)<br>            file.writeln &quot;* Title: &#39;#{title}&#39;&quot;<br>            file.writeln &quot;* Author: &#39;#{creator}&#39;&quot;<br>            file.writeln &quot;* URL: &#39;#{url}&#39;&quot;<br>            file.writeln &quot;* PublicationDate: &#39;#{pubDate}&#39;&quot;<br>            file.writeln &quot;* Categories: #{categories.join(&#39;, &#39;)}&quot;<br>            file.writeln &quot;&quot;<br>            file.writeln article_content<br>        end<br>end</pre><p>Result of this part of the code looks like this:</p><pre>====== Article 3 =====<br>* Title: &#39;Migrate GCP projects across organizations, the gcloud way&#39;<br>* Author: &#39;Riccardo Carlesso&#39;<br>* URL: &#39;https://medium.com/google-cloud/how-to-migrate-projects-across-organizations-c7e254ab90af?source=rss-b5293b96912f------2&#39;<br>* PublicationDate: &#39;Tue, 18 Apr 2023 13:16:26 GMT&#39;<br>* Categories: gcp-security-operations, google-cloud-platform, migration<br><br><br>            [...]<br>            Nel mezzo del cammin di nostra vita, mi ritrovai per una selva oscura, ché la diritta via era smarrita”— Dante Alighieri(*), Divine Comedy(*) the Italian version of Shakespeare, </pre><h4>Phase 3 — Get LLM to infer information and spark some humour</h4><p>If this was a deterministic program we could just end here: I have all the info, I’m basically translating from XML to JSON. Not majorly useful.</p><p>I’ll use GenAI to add some color here:</p><ul><li><strong>Infer</strong> author <strong>nationality</strong>,<strong> favorite languages</strong> and <strong>writing style</strong>.</li><li>Per article, write a small summary, infer accuracy and if it’s a GCP article or not. There you go, <strong>we have a rudimental QA tester and a classifier</strong>! — wOOOt! 😮</li></ul><p>For my buddy Romin I get this:</p><pre>{   &quot;prompt_version&quot;: &quot;1.6b&quot;,<br>    &quot;author_name&quot;: &quot;Romin Irani&quot;,<br>    &quot;author_nationality&quot;: null,<br>    &quot;author_style&quot;: &quot;verbose, professional&quot;,<br>    &quot;author_favorite_languages&quot;: &quot;Python, Java&quot;,<br>    &quot;typos&quot;: [<br>        {<br>            &quot;current&quot;: &quot;criterias&quot;,<br>            &quot;correct&quot;: &quot;criteria&quot;<br>        }<br>    ],<br>    &quot;articles_feedback&quot;: [<br>        {<br>            &quot;title&quot;: &quot;Integrating langchain4j and PaLM 2 Chat Bison Model&quot;,<br>            &quot;summary&quot;: &quot;The article describes how to integrate Langchain4j and PaLM 2 Chat Bison Model. It provides detailed instructions on how to set up the environment, create a Google Cloud Function, and deploy the model. The article also includes a code sample and a link to the GitHub repository.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/google-cloud/integrating-langchain4j-and-palm-2-chat-bison-model-a684cefd67af?source=rss-802a4d428d95------2&quot;,<br>            &quot;publication_date&quot;: &quot;Mon, 06 Nov 2023 11:01:02 GMT&quot;,<br>            &quot;accuracy&quot;: 9,<br>            &quot;is_gcp&quot;: true,<br>            &quot;movie_or_book&quot;: null<br>        },<br>        {<br>            &quot;title&quot;: &quot;Google Cloud Platform Technology Nuggets \u2014 October 15\u201331, 2023 Edition&quot;,<br>            &quot;summary&quot;: &quot;The article provides a summary of Google Cloud Platform Technology Nuggets for the period of October 15-31, 2023. It covers topics such as infrastructure, containers and Kubernetes, identity and security, networking, machine learning, storage, databases and data analytics, and developers and practitioners.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/google-cloud/google-cloud-platform-technology-nuggets-october-15-31-2023-edition-4d5ea0689e30?source=rss-802a4d428d95------2&quot;,<br>            &quot;publication_date&quot;: &quot;Tue, 31 Oct 2023 10:22:07 GMT&quot;,<br>            &quot;accuracy&quot;: 8,<br>            &quot;is_gcp&quot;: true,<br>            &quot;movie_or_book&quot;: null<br>        },<br>        {<br>            &quot;title&quot;: &quot;Develop a FlutterFlow App powered by Vertex AI PaLM 2 Integration&quot;,<br>            &quot;summary&quot;: &quot;The article describes how to integrate FlutterFlow with Vertex AI PaLM 2. It provides a step-by-step guide on how to set up the environment, create a Google Cloud Function, and deploy the model. The article also includes a code sample and a link to the GitHub repository.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/google-cloud/flutterflow-and-vertex-ai-palm-2-integration-14c137e83053?source=rss-802a4d428d95------2&quot;,<br>            &quot;publication_date&quot;: &quot;Thu, 26 Oct 2023 09:37:11 GMT&quot;,<br>            &quot;accuracy&quot;: 8,<br>            &quot;is_gcp&quot;: true,<br>            &quot;movie_or_book&quot;: null<br>        }<br>    ]<br>}</pre><p>For my buddy Guillaume I get this:</p><pre>{   &quot;prompt_version&quot;: &quot;1.6b&quot;,<br>    &quot;author_name&quot;: &quot;Guillaume Laforge&quot;,<br>    &quot;author_nationality&quot;: &quot;French&quot;,<br>    &quot;author_style&quot;: &quot;Guillaume Laforge&#39;s writing style can be described as professional, informative, and engaging. He often writes about technology, open-source software, and programming.&quot;,<br>    &quot;author_favorite_languages&quot;: &quot;Java, Python&quot;,<br>    &quot;articles_feedback&quot;: [<br>        {<br>            &quot;title&quot;: &quot;Tech Watch #4 \u2014 October, 27, 2023&quot;,<br>            &quot;summary&quot;: &quot;The article provides a summary of the latest developments in the field of artificial intelligence (AI). It covers topics such as the use of LLMs in vector embeddings, the scheduling of PostgreSQL tasks with pg_cron, and the creation of maps with Protomaps. The article also includes links to the original sources for further reading.&quot;,<br>            &quot;url&quot;: &quot;https://glaforge.medium.com/tech-watch-4-october-27-2023-d48a1449eeb0?source=rss-431147437aeb------2&quot;,<br>            &quot;publication_date&quot;: &quot;Fri, 27 Oct 2023 15:04:58 GMT&quot;,<br>            &quot;accuracy&quot;: 8,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;The Matrix&quot;<br>        },<br>        {<br>            &quot;title&quot;: &quot;Tech Watch #3 \u2014 October, 20, 2023&quot;,<br>            &quot;summary&quot;: &quot;The article provides a summary of the latest developments in the field of technology. It covers topics such as the use of Groovy in 2023, the state of WebAssembly in 2023, and the use of large language models (LLMs) to solve logic problems. The article also includes links to the original sources for further reading.&quot;,<br>            &quot;url&quot;: &quot;https://glaforge.medium.com/tech-watch-3-october-20-2023-11a70245017d?source=rss-431147437aeb------2&quot;,<br>            &quot;publication_date&quot;: &quot;Fri, 20 Oct 2023 19:49:34 GMT&quot;,<br>            &quot;accuracy&quot;: 9,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;2001: A Space Odyssey&quot;<br>        },<br>        {<br>            &quot;title&quot;: &quot;Client-side consumption of a rate-limited API in Java&quot;,<br>            &quot;summary&quot;: &quot;The article discusses different approaches for consuming rate-limited APIs in Java. It covers topics such as using exponential backoff and jitter, scheduled execution, and using the Bucket4J library. The article also includes code examples for each approach.&quot;,<br>            &quot;url&quot;: &quot;https://glaforge.medium.com/client-side-consumption-of-a-rate-limited-api-in-java-9fbf08673791?source=rss-431147437aeb------2&quot;,<br>            &quot;publication_date&quot;: &quot;Mon, 02 Oct 2023 00:00:53 GMT&quot;,<br>            &quot;accuracy&quot;: 10,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;The Imitation Game&quot;<br>        },<br>        {<br>            &quot;title&quot;: &quot;Tech Watch #1 \u2014 Sept 29, 2023&quot;,<br>            &quot;summary&quot;: &quot;The article provides a summary of the latest developments in the field of technology. It covers topics such as observability-driven development for LLMs, rebuilding LLM documentation chatbots, container security, and the future of databases. The article also includes links to the original sources for further reading.&quot;,<br>            &quot;url&quot;: &quot;https://glaforge.medium.com/tech-watch-1-sept-29-2023-2ac0a3a5016c?source=rss-431147437aeb------2&quot;,<br>            &quot;publication_date&quot;: &quot;Fri, 29 Sep 2023 00:00:11 GMT&quot;,<br>            &quot;accuracy&quot;: 7,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;Minority Report&quot;<br>        }<br>    ]<br>}</pre><p>For myself I get something like this:</p><pre>{   &quot;prompt_version&quot;: &quot;1.6b&quot;,<br>    &quot;author_name&quot;: &quot;Riccardo Carlesso&quot;,<br>    &quot;author_nationality&quot;: &quot;Italian&quot;,<br>    &quot;author_style&quot;: &quot;Verbose, uses personal anecdotes.&quot;,<br>    &quot;author_favorite_languages&quot;: &quot;Ruby&quot;,<br>    &quot;articles_feedback&quot;: [<br>        {<br>            &quot;title&quot;: &quot;What is toilet paper\u2019s right side?&quot;,<br>            &quot;summary&quot;: &quot;The author discusses the question of which side of toilet paper is the \u201cright\u201d side. They explore the different opinions on this topic and provide their own thoughts on the matter. Ultimately, they conclude that there is no definitive answer to this question and that it is up to each individual to decide which side they prefer.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/@palladiusbonton/what-is-toilet-papers-right-side-8da0504d6d0b?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Tue, 08 Aug 2023 16:37:20 GMT&quot;,<br>            &quot;accuracy&quot;: 8,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: null<br>        },<br>        {<br>            &quot;title&quot;: &quot;Spaghetti Bolognese don\u2019t exist!!1!&quot;,<br>            &quot;summary&quot;: &quot;The author discusses the common misconception that spaghetti Bolognese is an Italian dish. They explain that this dish is actually not from Italy and that it is not considered to be a traditional Italian dish. They also provide some tips on how to make a more authentic Italian pasta dish.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/@palladiusbonton/spaghetti-bolognese-dont-exist-1-2088d85909dd?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Fri, 21 Apr 2023 16:09:23 GMT&quot;,<br>            &quot;accuracy&quot;: 9,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: null<br>        },<br>        {<br>            &quot;title&quot;: &quot;Migrate GCP projects across organizations, the gcloud way&quot;,<br>            &quot;summary&quot;: &quot;The author provides a detailed guide on how to migrate GCP projects across organizations using the gcloud command-line tool. They cover everything from setting up the necessary permissions to executing the migration. This article is a valuable resource for anyone who needs to migrate GCP projects across organizations.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/google-cloud/how-to-migrate-projects-across-organizations-c7e254ab90af?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Tue, 18 Apr 2023 13:16:26 GMT&quot;,<br>            &quot;accuracy&quot;: 10,<br>            &quot;is_gcp&quot;: true,<br>            &quot;movie_or_book&quot;: null<br>}]}</pre><h4>Lessons learnt</h4><p>Today I learnt a few things:</p><ul><li>For the first time the<strong> token limitation</strong> was visible to me. Palm API’s text-bisonmodel has a 32k-token limit, and what I didn’t know is that it seems shared between input and output. If I increase the input size, this diminishes the output size (still to be confirmed, for the moment it’s just a hunch). For this reason I reduce my input from 32k to 22k. To see Token Count, Google gives you a <a href="https://cloud.google.com/vertex-ai/docs/generative-ai/get-token-count?hl=en">nice API to calculate it</a> (thanks Guillaume). You can see this very well from the API return JSON (note the sum of thetotalTokens here is exactly the maximum, <strong>8192</strong>):</li></ul><pre>&quot;metadata&quot;: {<br>    &quot;tokenMetadata&quot;: {<br>      &quot;outputTokenCount&quot;: {<br>        &quot;totalTokens&quot;: 549,<br>        &quot;totalBillableCharacters&quot;: 1312<br>      },<br>      &quot;inputTokenCount&quot;: {<br>        &quot;totalBillableCharacters&quot;: 20713,<br>        &quot;totalTokens&quot;: 7643<br>      }<br>    }<br>  }</pre><ul><li><strong>Prompting</strong> is a (long) fine-tuning <strong>feedback loop</strong>: you try something out, and after a few answers you realize it doesn’t work, so you try to ‘bribe’ your model saying to “please do something as it’s very important to you”. Example: the movie or book is always empty, it’s probably a stretch for a 0.1 temperature API invocation. So I change “<em>What existing movie or book would this article remind you the most of? Try a guess, use your fantasy</em>” by adding “<em>Please do NOT leave this null! It’s just for fun. yet its very important to me</em>”. Note that doesn’t fix — output gets “None” instead of null, which is fun. But read on…</li><li><strong>Temperature is an important parameter. W</strong>hen tasked to infer a title name for my articles, it would refuse, until I raised the temperature from 0.1 to 0.3. Now I get a curious result: my <strong>films</strong> are finally there! Wait — <em>Ratatouille</em>, seriously?</li></ul><pre>{<br>    &quot;prompt_version&quot;: &quot;1.6b&quot;,<br>    &quot;author_name&quot;: &quot;Riccardo Carlesso&quot;,<br>    &quot;author_nationality&quot;: &quot;Italian&quot;,<br>    &quot;author_style&quot;: &quot;Verbose, uses humor and personal anecdotes. Seems to prefer Ruby on Rails.&quot;,<br>    &quot;author_favorite_languages&quot;: &quot;Ruby&quot;,<br>    &quot;typos&quot;: [<br>        {<br>            &quot;current&quot;: &quot;cis-centralis /pendens&quot;,<br>            &quot;correct&quot;: &quot;cis-centralis/pendens&quot;<br>        },<br>        {<br>            &quot;current&quot;: &quot;trans-centralis/mur\u00e0lis&quot;,<br>            &quot;correct&quot;: &quot;trans-centralis/muralis&quot;<br>        },<br>        {<br>            &quot;current&quot;: &quot;spaghetti Bolognese don\u2019t&quot;,<br>            &quot;correct&quot;: &quot;Spaghetti Bolognese doesn&#39;t&quot;<br>        }<br>    ],<br>    &quot;articles_feedback&quot;: [<br>        {<br>            &quot;title&quot;: &quot;What is toilet paper\u2019s right side?&quot;,<br>            &quot;summary&quot;: &quot;The author discusses the great \&quot;toilet paper orientation debate\&quot; and shares their own experiences and opinions on the matter, ultimately concluding that there is no one right answer.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/@palladiusbonton/what-is-toilet-papers-right-side-8da0504d6d0b?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Tue, 08 Aug 2023 16:37:20 GMT&quot;,<br>            &quot;accuracy&quot;: 8,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;The Big Lebowski&quot;<br>        },<br>        {<br>            &quot;title&quot;: &quot;Spaghetti Bolognese don\u2019t exist!!1!&quot;,<br>            &quot;summary&quot;: &quot;The author argues that the popular dish \&quot;Spaghetti Bolognese\&quot; does not exist in Italy and is considered an \&quot;imaginary dish\&quot; by Italians. They explain that the traditional Italian dish is called \&quot;rag\u00f9 alla bolognese\&quot; and is typically served with tagliatelle or other types of pasta, not spaghetti.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/@palladiusbonton/spaghetti-bolognese-dont-exist-1-2088d85909dd?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Fri, 21 Apr 2023 16:09:23 GMT&quot;,<br>            &quot;accuracy&quot;: 9,<br>            &quot;is_gcp&quot;: false,<br>            &quot;movie_or_book&quot;: &quot;Ratatouille&quot;<br>        },<br>        {<br>            &quot;title&quot;: &quot;Migrate GCP projects across organizations, the gcloud way&quot;,<br>            &quot;summary&quot;: &quot;The author provides a detailed guide on how to migrate GCP projects across organizations using the gcloud command-line tool. They cover topics such as identifying the current state of the projects, managing IAM permissions, and handling special cases.&quot;,<br>            &quot;url&quot;: &quot;https://medium.com/google-cloud/how-to-migrate-projects-across-organizations-c7e254ab90af?source=rss-b5293b96912f------2&quot;,<br>            &quot;publication_date&quot;: &quot;Tue, 18 Apr 2023 13:16:26 GMT&quot;,<br>            &quot;accuracy&quot;: 10,<br>            &quot;is_gcp&quot;: true,<br>            &quot;movie_or_book&quot;: &quot;The Matrix&quot;<br>        }<br>    ]<br>}</pre><ul><li>Finally, asking an LLM to create JSON or YAML can really speed up your development time, you can create <a href="https://api.rubyonrails.org/v3.1/classes/ActiveRecord/Fixtures.html">fixtures</a> for your blog or app, or you can just use a computer to further process an imperfect, half-processed entity.</li></ul><h3>Conclusions</h3><p>LLMs are a really powerful tool to read long quantities of text, summarize them and classify them based on your tastes.</p><p>It can provide structured output (eg JSON) which you can in turn parse and use to populate a DB and an app. This way, a <strong>recommendation engine</strong> for your favourite articles (eg GCP articles, sorted by date of accuracy ) becomes easy and fun to build!</p><h4>Next Steps</h4><p>How could I extend this project?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/949/0*uCKwk5OiCddNrioH" /></figure><ol><li>Add a workflow, possibly with <a href="https://cloud.google.com/workflows"><strong>Cloud Workflows</strong></a>. Iterate until I’m happy with the quality of the outputted JSON.</li><li>Use pre-vetted JSON to populate an easy-peasy Node.JS app, and run it on <a href="https://cloud.google.com/run">Cloud Run</a>.</li><li>Change the code to create the “Morning list of articles for Riccardo to read”, by pulling A LOT of articles and do queries by <strong>keyword</strong> (in this demo it’s ‘GCP’ but could also bi ‘Pistacchio’ or ‘Politics’).</li><li>sed s/keyword/embeddings/g to make it able to do semantic search.</li></ol><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=02fe9d30475a" width="1" height="1" alt=""><hr><p><a href="https://blog.devops.dev/parse-medium-articles-with-genai-and-add-some-fun-02fe9d30475a">Insights on Medium articles with GenAI and Ruby!</a> was originally published in <a href="https://blog.devops.dev">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is toilet paper’s right side?]]></title>
            <link>https://medium.com/@palladiusbonton/what-is-toilet-papers-right-side-8da0504d6d0b?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/8da0504d6d0b</guid>
            <category><![CDATA[toilet-paper]]></category>
            <category><![CDATA[ruby-on-rails]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Tue, 08 Aug 2023 16:37:20 GMT</pubDate>
            <atom:updated>2023-08-08T16:37:20.531Z</atom:updated>
            <content:encoded><![CDATA[<p>There’s very little on this planet as polarizing as “the right position of toilet paper”: what I call <em>cis-centralis</em> /<em>pendens</em>, or <em>trans-centralis/</em>murālis<em>? </em>(yup, I just made those up — start googling 👹).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*APk8AVbLtK9dn6VYwNIv_w.png" /><figcaption>A puffin trying to find the right position to his toilet paper</figcaption></figure><p>As a <a href="https://rubyonrails.org/">Ruby on Rails</a> developer, I’ve been long interested in <a href="https://en.wikipedia.org/wiki/Convention_over_configuration"><em>Default over Configuration</em></a><em> (and </em><a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment"><em>POLA</em></a><em>)</em>. What is the default/correct solution? I thought I knew.. until I got married.</p><pre>myhome:<br>  bath_ricc:<br>    toilet_paper_position: &#39;?!?&#39; # looking for a golden default..<br>  bath_kids:<br>    toilet_paper_position: &#39;?!?&#39; # must clearly be the same golden default!</pre><h4>The official Solution</h4><p>The inventor of toilet paper patented the solution in 1891 (patent <a href="https://patents.google.com/patent/US459516">US459516</a>, apparently Seth Wheeler was a Googler <em>ante litteram</em>).</p><figure><img alt="Wheeler took good time to describe how to extract the paper, piece by piece. Wow!" src="https://cdn-images-1.medium.com/max/500/0*SR7pztID9FbvgFTr.jpg" /></figure><h4>However..</h4><p>.. It’s actually more complicated than it looks.</p><p>I have this <em>sheldonic</em> tendency of thinking people disagreeing with me on trivial things being automatically wrong; however, I often stand corrected. This is one of those times :) After consulting a number of people who disagreed with me, trying to hold my initial disgust in this barbaric act of “muralic paper” (<em>Are you crazy?!? It gets dirty just before touching your butt!</em>) I realized there are cases where that configuration can actually do better.</p><ul><li>If you have a <strong>cat</strong>, the cat will likely like to play with the paper.</li><li>If you have a <strong>son</strong>, say his name is Sebastian . I don’t have any experimental proof that a daughter would yield the same results. Please comment to provide further data points.</li><li>There might be other occasions where this might be true (eg, windy location, gravity working against you, lot of liquid close to the precious paper, ..). Please contribute with your own experience.</li></ul><h4>Conclusions</h4><p>In this factious article, I took a dilemma, showed the solution, and then showed that the solution can fail due to .</p><pre># This is the perfect solution which works for my home.<br>my_home:<br>  bath_ricc:<br>    toilet_paper_position: pendens <br>  bath_kids:<br>    toilet_paper_position: muralis</pre><p>I believe after reading this, you will be a more complete human. You’re welcome 🤣</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8da0504d6d0b" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Spaghetti Bolognese don’t exist!!1!]]></title>
            <link>https://medium.com/@palladiusbonton/spaghetti-bolognese-dont-exist-1-2088d85909dd?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/2088d85909dd</guid>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Fri, 21 Apr 2023 16:09:23 GMT</pubDate>
            <atom:updated>2023-04-21T16:12:23.239Z</atom:updated>
            <content:encoded><![CDATA[<p><em>(yes, the exclamation marks are correct 😉)</em></p><p><strong>Spaghetti Bolognese</strong>: Everyone knows them… except Italians.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/750/0*5ZewLxGd3Yska4Am.jpg" /><figcaption>An imaginary dish, .. just like square root of -1, or like a word which doesn’t exist... just uselesser</figcaption></figure><p>Right, read it again if you don’t believe me… in Italy we don’t prepare that kind of pasta.</p><p>What the hell, you may be wondering… Italy is famous for spaghetti <em>and</em> bolognese sauce (that we call “ragù<em> alla bolognese</em>” or simply ragù<em>, (from </em><a href="https://en.wikipedia.org/wiki/Ragout"><strong><em>r</em>agoût</strong></a>), but we would never mix these two things in the same dish).</p><p>Why oh why, you may as well think? I think the reason can be found in two ways.</p><p>First, they come from two different cultures. Spaghetti come from the south, where a simpler tomato, basil, and veg sauce would seem more appropriate.</p><p>Second, spaghetti are slippery, so they’re not as good to ‘retain’ a demanding sauce as a beef ragù is. As every bolognese person can tell you, appropriate pastas for bolognese ragù can be: tagliatelle (first choice), pennette/penne/mezzepenne, conchiglie, fusilli, maccheroni, … in general every form of ‘<strong>pasta rigata</strong>’ (<em>ribbed pasta</em>). Pasta rigata is a pasta that is not smooth, so thas sauce is more likely to stay with the pasta, instead of slipping down. I think the main reason why every person from Bologna is horrified by the mere idea of associating spaghetti with our proud ragÃ¹ is that we perfectly know (because everyone has made that mistake once in their life) what happens if you do that: spaghetti would ruthlessly come up your fork completely naked of any red or meaty trace… just to leave a gloomy surprise in the very end: a bloody pool of meat and tomato just looking at you as if asking “Now what?”. And unless you are Italian, you don’t know what scarpetta is. but that’s another story.</p><h4>What does wikipedia say?</h4><p>As Wikipedia (as of 19dec09) says about <a href="http://en.wikipedia.org/wiki/Bolognese_sauce">Bolognese_sauce</a>:</p><p><em>[…] </em>Bolognese sauce known in Italian as <strong>ragù alla bolognese</strong>, pronounced [, ragù bolognese, or simply ragù) is a meat-based sauce in Italian cuisine, typical of the city of Bologna. It is customarily used to dress tagliatelle al ragù and to prepare lasagne alla bolognese.</p><p>Italian ragù alla bolognese is a slowly cooked meat-based sauce, and its preparation involves several techniques, including sweating, sautéing and braising. Ingredients include a characteristic soffritto of onion, celery and carrot, different types of minced or finely chopped beef, often alongside small amounts of fatty pork. White wine, milk, and a small amount of tomato paste or tomatoes are added, and the dish is then gently simmered at length to produce a thick sauce.</p><p>Outside Italy, the phrase “Bolognese sauce” is often used to refer to a tomato-based sauce to which minced meat has been added; such sauces typically bear little resemblance to the Italian ragù alla bolognese, being more similar in fact to the ragù alla napoletana from the tomato-rich south of the country. Although in Italy ragù alla bolognese is not used with spaghetti (but rather with flat pasta, like tagliatelle),[2][3][4] so-called “spaghetti bolognese” has become a popular dish in many other parts of the world.[where</p><h4>I’m not Italian: what can we do to comply?</h4><p>If you weren’t born with the privilege of 🇮🇹 Italianity, I’ve built a software for you to teach you the proper <em>abbinamenti</em> (couplings) between <strong>pastas</strong> and <strong>sauces</strong>.</p><p>It’s simple, install my app from github: <a href="https://github.com/palladius/pasta">https://github.com/palladius/pasta</a></p><p>It’s written in Ruby on Rails (of course), it’s fully Dockerized, and features a beautiful matrix of pastas/sauces:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*kfAypJ0sBgMh2UKu.png" /></figure><p>The code which defined good condiments is <a href="https://github.com/palladius/pasta/blob/master/db/seeds.rb#L75-L100">here</a>, under <a href="https://github.com/palladius/pasta/blob/master/db/seeds.rb#L75-L100">db/seeds.rb</a> .</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2088d85909dd" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Migrate ☁️ GCP projects across organizations, with gcloud]]></title>
            <link>https://medium.com/google-cloud/how-to-migrate-projects-across-organizations-c7e254ab90af?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/c7e254ab90af</guid>
            <category><![CDATA[gcp-security-operations]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[migration]]></category>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Tue, 18 Apr 2023 13:16:26 GMT</pubDate>
            <atom:updated>2023-11-20T15:04:31.008Z</atom:updated>
            <content:encoded><![CDATA[<p><em>Nel mezzo del cammin di nostra vita, <br>mi ritrovai per una selva oscura, <br>ché la diritta via era smarrita”</em></p><p><em>— </em>Dante Alighieri(*), <a href="https://en.wikipedia.org/wiki/Divine_Comedy">Divine Comedy</a></p><p><em>(*) the Italian version of Shakespeare, just better</em></p><p>Translated for non-🇮🇹: some day I was encouraged by some external entity to move a lot of projects from 5 of my organizations (<em>source</em>) to another organization (<em>destination</em>).</p><p><strong>TL;DR</strong> If you find this article too long and you want to jump to the code, click on <a href="https://gist.github.com/palladius/a99993feb7e6d78b7a2abea0a10c3242">this </a>🐙😺<a href="https://gist.github.com/palladius/a99993feb7e6d78b7a2abea0a10c3242"> gist</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/974/1*Hl8tr6N3VrV_AGItbPb25w.jpeg" /><figcaption>My two boys in front of <a href="https://en.wikipedia.org/wiki/The_Gates_of_Hell">The Gates of Hell</a>, Musée Rodin, Paris, 2022.</figcaption></figure><p>Since I’m the best kind of Software Engineer<em> </em>— the bad coder but <em>lazy</em> kind 🌝 — I decided to script all my move and document for posterity. Also showing you the mistakes I found along the way might be helpful (maybe?).</p><p>This is explained in this GCP page(s): <a href="https://cloud.google.com/resource-manager/docs/project-migration?hl=en">https://cloud.google.com/resource-manager/docs/project-migration</a></p><p>Please remember to dump your current IAM config for the 2+ organisations in case you want to recreate the previous config you just changed. Having a local JSON config for your Org is always a good thing to do. 😉 For instance:</p><pre>$ gcloud alpha organizations get-iam-policy $ORG_ID \<br> - format json &gt; out/org-$DOMAIN-iam.json</pre><p>You can also add specific policies you care about (see below why this is important):</p><pre>$ gcloud resource-manager org-policies describe constraints/iam.allowedPolicyMemberDomains \<br> --organization $ORG_ID | tee -a out/org-$DOMAIN-policies.log</pre><h3>Know the current state of the world</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*FZLcKhtiWl7OqL0w" /></figure><p>You need to know the state of the world (<em>your </em>world). The best way for me to understand where I stand is this:</p><ul><li>Use this awesome repo <a href="https://github.com/palladius/org-folder-projects-graph">https://github.com/palladius/org-folder-projects-graph</a> I wrote a few years ago. <br><strong>Note</strong>: It launches gcloudonce per folder, it’s super-<strong>inefficient</strong> (uses bash over APIs), but has the nice aspect that it keeps all JSON from gcloud locally. This is a big plus in every case except today: ▶️ after the move you might need a make cache-clean before re-launching it.</li><li>Launch the script for one Org. Sample output:</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/477/0*-tHXIe3qGfvvxZfx" /><figcaption>Output from an Org dump script written by an Italian</figcaption></figure><p>If you don’t care about the folder structure at all, a simpler way is to just invoke something like this:</p><pre># Option 1: Flat structure (simple)<br>$ gcloud projects list - filter \<br>  &quot;parent.id=$ORG_ID AND parent.type=organization&quot;</pre><p>For example:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/861/0*zwm-PDduGYEb60X4" /><figcaption>flat taxonomy from script1</figcaption></figure><p>Note this won’t work if you have a complex hierarchy, which is why you probably want to use my script to get all the ramification of your org.</p><p>You can also play with <a href="https://cloud.google.com/asset-inventory/docs/overview"><strong>GCP Asset Inventory</strong></a> (see great <a href="https://stackoverflow.com/questions/61244749/how-to-list-all-projects-in-gcp-that-belongs-to-a-specific-organization">stackoverflow</a> tip) to get the list <em>without</em> the 🍕 pizza slices, but you’d be sadder 😫 , I’m sure.</p><pre># Option 2: Tree structure, with AssetInventory.<br>$ gcloud beta asset search-all-resources \<br>  --asset-types=&#39;cloudresourcemanager.googleapis.com/Project&#39; \<br>  --scope=&quot;organizations/$ORGID&quot; | egrep &#39;^name:&#39; | cut -d/ -f 5</pre><p>Whatever your workflow, I’m pretty sure you’ll have exceptions, which is why having a spreadsheet (<a href="https://spreadsheet.new/">https://spreadsheet.new/</a> ) will help you big time. I state the source org, destination org, source folder,. source project id, expected destination folder, and notes for my exceptions.</p><p><strong>Please also read this</strong> <a href="https://cloud.google.com/resource-manager/docs/handle-special-cases?hl=en">https://cloud.google.com/resource-manager/docs/handle-special-cases</a> for special cases, like VPC-SC or GCS Bucket lock.</p><p>Let’s now find out the IAM state for your org. This is pretty sweet and took me a while to <a href="https://stackoverflow.com/questions/47006062/how-do-i-list-the-roles-associated-with-a-gcp-service-account">research</a> and adapt:</p><pre># Beautiful query which flattens (multiple roles &lt;=&gt; multiple identities).<br>$ gcloud organizations get-iam-policy &quot;$ORG_ID&quot; \<br>  -flatten=&#39;bindings[].members&#39; \<br>  -format=&#39;table(bindings.role,bindings.members)&#39; | <br>  tee &quot;t.org-iam-policy.$ORG_DOMAIN.txt&quot;<br>ROLE MEMBERS<br>[..]<br>roles/billing.admin         group:gcp-billing-admins@example.org<br>roles/billing.admin         user:ricc@example.org<br>roles/billing.creator       domain:example.org<br>roles/browser               group:gcp-billing-admins@example.org<br>roles/cloudasset.owner      user:palladius@example.org<br>roles/cloudasset.owner      user:ricc@example.org<br>roles/orgpolicy.policyAdmin group:gcp-org-administrators@example.org<br>roles/orgpolicy.policyAdmin user:riccardo@example.org<br>roles/resourcemanager.projectCreator user:palladiusbonton@example.org<br>roles/resourcemanager.projectMover   user:ricc@example.org</pre><h3>I don’t want to read the docs: Let’s first try brute force!</h3><p>I hate it when someone provides me with a working solution and I apply it and don’t know the mystical secrets that led to it. (<em>I invented the half derivative when I was 16, just so you know — and yes, as you can imagine, it’s useless</em>).</p><p>So let’s try to smash our head over it, one mistake at a time.</p><h3>Error 1 : “The caller does not have permission”</h3><p>Let’s try it, the command is simple — but won’t work the first 27 times you try it. You have my word. But still, try it. I’ll use the same ids as in <a href="https://cloud.google.com/resource-manager/docs/configure-org-policy?hl=en">public docs</a>:</p><pre># Your Org Admin account, and gcloud already working for it:<br>export POWER_ACCOUNT=&#39;my-power-account@gmail.com&#39;<br># SRC ORG: 12345678901 source.example.com <br>export SRC_ORG_ID=&quot;12345678901&quot;<br>export SRC_ORG_DOMAIN=&#39;source.example.com&#39;<br># DST ORG: 45678901234 destination.example.com<br>export DST_ORG_ID=&quot;45678901234&quot;<br>export DST_ORG_DOMAIN=&#39;destination.example.com&#39;<br><br>$ gcloud beta projects move my-project-in-src-org \<br>  --organization=$DST_ORG_ID --quiet<br><br>- &#39;@type&#39;: type.googleapis.com/google.rpc.DebugInfo<br>  detail: |-<br>    [ORIGINAL ERROR] generic::permission_denied: The caller does not have permission<br>    com.google.apps.framework.request.StatusException: &lt;eye3 title=&#39;PERMISSION_DENIED&#39;/&gt; generic::PERMISSION_DENIED: The caller does not have permission [google.rpc.error_details_ext] { code: 7 message: &quot;The caller does not have permission&quot; }<br># Computer says no!</pre><p>The most powerful IAM permission you can have on a GCP Organization is organizationAdmin. You’d think that if you have that power, you can do <em>anything</em> in that universe, right? Think twice! There are additional powers that role doesn’t have (and I’m kind of relieved it is this way).<br>One of them is the OrgPolicyAdmin, which means that as OrgAdmin, you first need to give yourself that power before you can use it (not very UNIX, I know, but definitely safer).</p><pre># Set IAM for SrcOrg<br>$ gcloud organizations add-iam-policy-binding $ORG_ID \<br>  --member=&#39;user:$ACCOUNT&#39; \<br>  --role=&#39;roles/resourcemanager.organizationAdmin&#39; \<br>  --role=&#39;roles/resourcemanager.projectIamAdmin&#39; \<br>  --role=&#39;roles/resourcemanager.projectMover&#39;  \<br>  --role=&#39;roles/orgpolicy.policyAdmin&#39;  \<br>  --condition=None</pre><p>For this command to work, you need the issuer (gcloud config get account) to have the power to grant — but this is beside the scope of this doc.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/517/0*GSemn4o3mK4xKGGs" /><figcaption>In the UI it will look something like this</figcaption></figure><p>Note: Org Policies are documented <a href="https://cloud.google.com/resource-manager/docs/organization-policy/org-policy-constraints?hl=it">here</a>.</p><h4>Error 2: Constraint `constraints/resourcemanager.allowedExportDestinations`</h4><p>Let’s try to migrate a project now:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*E7XsdJVJDqFz9u1aka3Gqw.png" /><figcaption>This is NOT where I would have expected a Input/Output error! 😆</figcaption></figure><p>Next step: Let me configure the <strong>allowedPolicyMemberDomains </strong>policy first.<em> (Why? It failed but I forgot to capture the error, my bad. For this error you just need to trust me).</em></p><pre># This might fail..<br>$ gcloud beta projects move &quot;my-project-in-src-org&quot; \<br>  --organization=&quot;$DST_ORG_ID&quot; --quiet<br><br># This sets target customer_id!<br>$ gcloud resource-manager org-policies allow --organization &quot;$SRC_ORG_ID&quot; \<br>  iam.allowedPolicyMemberDomains &#39;C04abcdef&#39; # gives access to SrcOrg to Dest id</pre><p><strong>Note.</strong> The “C0..” id is the Directory Customer Id you get from gcloud organization list for your destination org.</p><p><em>- I’m ready… Now it’s going to work, I’m sure! <br>- Oh wait… 🙈</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Zoc2xlTjUlowvAGn" /><figcaption>Damn, another error!</figcaption></figure><p>What does it mean? It means that you need to configure your “Org Firewall” to allow projects out of your Source Organization. If you’re a Cisco Certified engineer — you already know what error is coming next.. <strong>Allowlisting palooza </strong>😜<strong>!</strong></p><pre># Aloow SRC to export to DST<br>gcloud resource-manager org-policies allow --organization &quot;$SRC_ORG_ID&quot; \<br>  resourcemanager.allowedExportDestinations \<br>  &quot;under:organizations/$DST_ORG_ID&quot;<br># Note the &quot;under:&quot; needed to pass the policy all the way down from that folder</pre><h4>Error 3: constraints/resourcemanager.allowedImportSource</h4><p>This is similar to the error above, but it’s from the receiving end.</p><p>To fix: damn I did it on the UI. My apologies. I would presume it’s really the symmetrical opposite, like:</p><pre># This is me guessing but I should be too far. <br># TODO(ricc): remove powers from DST and try again<br>gcloud resource-manager org-policies allow --organization &quot;$DST_ORG_ID&quot; \<br>  resourcemanager.allowedImportSource \<br>  &quot;under:organizations/$SRC_ORG_ID&quot;</pre><h4>[optional] Refining the security</h4><p>Note that to make things simple I gave a single user OrgAdmin for two organizations.</p><ul><li><strong>simple/insecure (pet project).</strong> The simple way is to have a single powerful account (gcloud account, eg “<a href="mailto:poweruser@company.com">poweruser@company.com</a>”) which has access to both SRC and DST orgs. This worked for me, as I was the sole owner of them all and I was under time pressure.</li><li><strong>complex/more secure (enterprises)</strong>. In a more enterprise scenario, you’d have a less pressing time concern and you would probably be obliged to have smaller IAM permissions on both sides, probably having two individuals to carry on these two tasks. Which is why it’s nice to have them gcloud-ed.</li></ul><p>In the second case, follow the <a href="https://cloud.google.com/resource-manager/docs/assign-iam-roles?hl=it">docs</a>:</p><p><strong>Source Org :</strong></p><ul><li><strong>IAM: roles/resourcemanager.projectIamAdmin</strong> in the project to move (but if I want to do it at scale I’ll set it up in the org)</li><li><strong>IAM: roles/resourcemanager.projectMover</strong> in the parent resource.<br>Again, if you’re lazy you can just set these two at Org level and get it done once and for all. But then remember to remove this access at the end of the org move. You can also a time-bound IAM constraint ending tomorrow — this is for lazy people like me who don’t trust themselves to remember to close a parenthesis tomorrow and rather close it as you open it.</li><li><strong>OrgPolicy</strong>: <strong>constraints/resourcemanager.allowedExportDestinations</strong>. You can set the domain id (“C0somethin”) as allowed destination or you can be lazy as me and just set them ALL, depending if you’re an enterprise who wantgs to do it well or you just want to get it done soon and you don’t care much of the org you leave behind.</li></ul><p>On the <strong>destination organization:</strong></p><ul><li><strong>IAM</strong>: ProjectMover</li><li><strong>Org Policy</strong>: constraints/resourcemanager.allowedImportSource</li></ul><h4>Meta-Scripts and tidy migration</h4><p>If you migrate 300 projects from 5 orgs into one, you might want to use Folders or it’ll be a very nasty place tomorrow (<em>“where does this project come from again?”)</em>. You can track pre-migration state in a few ways: you can dump the state on a lot of TXT in local file (but I usually remove them with my ruthless make cleans), on a Google Spreadsheet, or have your business logic do the job for you. Let’s explore this one..</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1KVyCI3Vy9g2nvZJ9gzZbQ.png" /><figcaption>Here’s the migration in a nutshell: all the Source folder structure complexity is flattened in the Destination under a single special folder.</figcaption></figure><p>I had some fun coding in Ruby (in a private repo which is in no shape to be publicized unless you make a lot of noise in the comments 😉).</p><p>Nothing better than a <strong>script</strong> which writes a <strong>script</strong> for you. This is useful when you want to iterate through 10 migrations but you know that ONE project doesnt fit into it -&gt; I create a 10 line blurb and then I just comment out the one I dont need. It’s also good for documenting which commands you ran on local file. Let me show you.</p><pre><br>$ bin/13-gcloud-move-projects-to-joonix-under-domain.rb palladius.eu palladius-eu-infra prova-enonomai-palldius-eu  gcpprojects2sheets <br>[...]<br>gcloud beta projects move &#39;palladius-eu-infra&#39; --folder=&#39;1038774614299&#39; --quiet       # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu<br>gcloud beta projects move &#39;prova-enonomai-palldius-eu&#39; --folder=&#39;1038774614299&#39; --quiet       # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu<br>gcloud beta projects move &#39;gcpprojects2sheets&#39; --folder=&#39;1038774614299&#39; --quiet       # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu</pre><p>Note, this commands are dumped into a deterministically-named bash script which contains the commands, so I can comment out the projects I don’t want to move (yet); the deterministic naming means that if I run it again, it will re-apply the same logic to the same file, which is good if you have it in version control and if the logic is not trivial (eg, find all projects under a folder 😉).</p><p>Let’s now call my 🍕 pizza software (TM) after a make cache-clean to see if the migration worked:</p><pre>$ git clone https://github.com/palladius/org-folder-projects-graph/ <br>$ cd org-folder-projects-graph/<br>(base) ricc@mbp:🏡~/org-folder-projects-graph$ ./recurse_folders.rb palladius.joonix.net<br>[...]<br>├─ 📂 133363080569 (Spostamenti CrossOrg)<br>    ├─ 📂 737267668168 (SPECIAL_ORPHANS)<br>        ├─ 🍕 cicd-platinum-test041 (713582791007)<br>    ├─ 📂 1038774614299 (palladius-eu)<br>        ├─ 🍕 original-bot-383907 (642248137380)<br>        ├─ 🍕 prova-enonomai-palldius-eu (898096115869)<br>        ├─ 🍕 gcpprojects2sheets (383820962508)<br>        ├─ 🍕 palladius-eu-infra (845199147079)<br>[..]<br></pre><p>And it did! A round of applause.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/357/0*GIEcWaVhShNnjqI6" /><figcaption>Plenty of magic here: my script accepts a FolderId ( 🇮🇹 “CrossOrg Movemements”) and it searches for the subfolder named like the domain (creating it if its not found). Wow!</figcaption></figure><p>My script was configured to generate a folder called like the org (changing dot with dash for obvious reasons): 133363080569. My script would create a subfolder if needed, get that folder id and create the scripts for me:</p><pre>gcloud beta projects move &#39;palladius-eu-infra&#39; - folder=&#39;1038774614299&#39; - quiet # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu<br>gcloud beta projects move &#39;prova-enonomai-palldius-eu&#39; - folder=&#39;1038774614299&#39; - quiet # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu<br>gcloud beta projects move &#39;gcpprojects2sheets&#39; - folder=&#39;1038774614299&#39; - quiet # migrate project given via CLI to proper subfolder of palladius.joonix.net under palladius.eu</pre><p>After a lot of lost hours debugging, I wrote my bash code-writing ruby script to add meaningful comments aside the command. This was a stroke of genius (for my limited coding abilities) since all this movement includes non-mnemonic numbers, so using the domain names after the comment helped me understand what i was doing.</p><h4>Another error: bad chars in project name (!)</h4><p>Now, I don’t know how many of you will find this error, but if you do, Google is your friend (and mine too) and you’ll find this article, I’m sure 😄</p><p>I had project ids since 2012, and I’ve given them names which included parenthesis. For instance, the project id palladiusbonton-nobilling had an astonishing description (Project Name): “<em>PalladiuBontonTest </em><strong><em>(</em></strong><em>No Billing</em><strong><em>)</em></strong>”. Now this was never a problem in my life until some day… some of them gave me error. Interestingly enough, most came from one single error type: <a href="https://www.youtube.com/watch?v=KrZHPOeOxQQ">I gave my project ids a bad name</a>: I should have known better than Bon Jovi!</p><p>Solution: I scripted in 💎 ruby a project description change which just removes the parenthesis (and the regex is DRY in case I find something new). To be on safe side, I change bad chars into <a href="https://www.youtube.com/watch?v=dg9Ae8ACTgw"><em>empty spaces</em></a> 🙂, as I love Queen more than Bon Jovi.</p><pre>$ bin/11-migrate-orphans.rb <br>[..]<br>goliardia2                     Goliardia2 (no billing uffi)              576689998257<br>palladiusbonton                palladiusbonton (billing disabled)        606248867298<br>palladiusbontontest-nobilling  PalladiuBontonTest (No Billing)           690861376600<br>riccardo-chatroom1             riccardo-chatroom-one (billing disabled)  941891472972<br># EXECUTE this to fix the project: <br>gcloud projects update &#39;palladiusbonton&#39; --name=&#39;palladiusbonton  billing disabled &#39; # Former description was: &#39;palladiusbonton (billing disabled)&#39;<br>palladiusbontontest-nobilling // 690861376600 ### &#39;PalladiuBontonTest (No Billing)&#39;<br># EXECUTE this to fix the project: <br>gcloud projects update &#39;palladiusbontontest-nobilling&#39; --name=&#39;PalladiuBontonTest  No Billing &#39; # Former description was: &#39;PalladiuBontonTest (No Billing)&#39;<br>riccardo-chatroom1 // 941891472972 ### &#39;riccardo-chatroom-one (billing disabled)&#39;<br># EXECUTE this to fix the project: <br>gcloud projects update &#39;riccardo-chatroom1&#39; --name=&#39;riccardo-chatroom-one  billing disabled &#39; # Former description was: &#39;riccardo-chatroom-one (billing disabled)&#39;</pre><p>Note the pattern: my 11th script creates an output with (1) the hopefully right command and (2) a human-readable description.</p><p>How do Igcloud it?</p><pre>gcloud projects update &#39;project-id-or-number&#39; \<br>  --name=&#39;New Description without Parenthesis and stuff&#39;</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*8d9udHN3wrwHeUv3" /><figcaption>..and here its how it looks if you have good eyes or monitor.</figcaption></figure><h4>Wait: what about the orphans?</h4><p>I noticed that not all projects were under an organization, some were orphans (ie, not attached to any organization).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*C0W-d5Xa_F6c1E63.png" /><figcaption>A few orphan project ids, stranded in Google Cloud</figcaption></figure><p>Now the <strong>migration</strong> script is the same as per other projects (<a href="https://cloud.google.com/sdk/gcloud/reference/beta/projects/move">documentation</a>):</p><pre>gcloud beta projects move $PROJECT_ID \<br>--{folder|organization} $DESTINATION_ID</pre><p>However, finding org-less projects require a different search, which took me a while. <a href="https://stackoverflow.com/questions/58543614/how-do-i-list-my-gcp-projects-under-no-organization-using-the-resource-manager-a">Let me Stackoverflow it for you</a>:</p><pre>gcloud projects list --filter=&quot;parent.id.yesno(yes=&#39;Yes&#39;, no=&#39;No&#39;)=No&quot;<br># This returns the list of ptroject that current $ACCOUNT has access to</pre><p>Note that the definition of orphan depends on your identity (foo.bar@gmail.com), not from an org. Different users perceive different orphans, based on their access to projects. To make sure you see them all, you should iterate through all your accounts (<a href="https://gist.github.com/palladius/a99993feb7e6d78b7a2abea0a10c3242">code snippet</a>).</p><p><strong>Beware!</strong> While Org-ful projects are likely to all belong to you or your team, the Org-less projects could belong to anyone else! I moved by mistakes projects where I was owner but which belonged to another team. Make sure you look at permissions on those projects before migrating. <br>If you’re not the sole owner, consider adding these projects to some <em>“dispute” spreadsheet</em> where you get the ok for the respective owners before moving (or any workflow which works for you).</p><h3>Conclusions</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*q5CwHu_9zctox7RL.png" /><figcaption>Success! I was able to migrate hundreds of projects from one org to another</figcaption></figure><p>A few lesson learnt:</p><ul><li>Being OrgAdmin is not enough, sometimes you need to call the Org Police 👮.</li><li>You need to allowlist the source domain to destination domain, and vice versa. Just like in a network firewall with two untrustworthy parts, which makes sense.</li><li>I believe nobody documented this gcloud approach before (prove me wrong — or maybe not, as I’ve spent 72+ hours doing this😛). Researching the right gcloud filters is sometime a tedious work.</li><li>Nothing helps more than a Migration Spreadsheet.</li><li>Write code which writes <em>and documents</em> code, particularly where you have to do with boring <em>numeric</em> ids.</li><li>Migrating N source orgs into N deterministically-named folders of a target destination org sub-folder was a <strong>really good idea</strong>.; by deterministically I mean: take the org domain and change dots with dashes (since dot are illegal): eg “example-com”.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1KVyCI3Vy9g2nvZJ9gzZbQ.png" /><figcaption>Here’s the migration in a nutshell: all the Source folder structure complexity is flattened in the Destination under a single special folder.</figcaption></figure><p><strong>Please let me know if you find mistakes,</strong> or you find a failure domains I haven’t described that can be <em>gclouded</em> , or any missing note. Thanks in advance. 😙</p><h3>Next Steps</h3><ul><li>open source my code:</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/612/1*HwPOay1JOOHfgash9Mjd3w.png" /></figure><ul><li>recreate the source folder structure in the destination (!)</li><li>Bonus point to copy/preserve IAM and Org Policies across folders structure (although this probably needs some source/destination IAM mapping which is beside the scope of this article).</li><li>Put some code in a GitHub Gist:</li></ul><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3c408b048fe9b49c8ea3a56ab8dfd0d0/href">https://medium.com/media/3c408b048fe9b49c8ea3a56ab8dfd0d0/href</a></iframe><h3>URLography</h3><p>Pages I used to find answers to this:</p><ul><li><a href="http://www.google.com">www.google.com</a></li><li><a href="https://github.com/palladius/org-folder-projects-graph/">https://github.com/palladius/org-folder-projects-graph/</a> Amazing script to dump your org</li><li><a href="https://cloud.google.com/resource-manager/docs/project-migration?hl=it">https://cloud.google.com/resource-manager/docs/project-migration</a> (official). It took me a while to understand there are 6 more pages to navigate on the left (see image below).</li><li><a href="https://cloud.google.com/resource-manager/docs/organization-policy/org-policy-constraints?hl=it">https://cloud.google.com/resource-manager/docs/organization-policy/org-policy-constraints</a> Org policies explained.</li><li><a href="https://medium.com/google-cloud/migrating-a-project-from-one-organization-to-another-gcp-4b37a86dd9e6">https://medium.com/google-cloud/migrating-a-project-from-one-organization-to-another-gcp-4b37a86dd9e6</a> Yogesh wrote the article before me, but no gcloud :)</li><li><a href="https://medium.com/google-cloud/setting-up-google-cloud-identity-for-multinational-companies-4afcbb18dee1">https://medium.com/google-cloud/setting-up-google-cloud-identity-for-multinational-companies-4afcbb18dee1</a> this guy is solving another problem, but he’s using gcloud</li><li><a href="https://stackoverflow.com/questions/73411088/unable-to-migrate-gcp-project">https://stackoverflow.com/questions/73411088/unable-to-migrate-gcp-project</a></li><li><a href="https://stackoverflow.com/questions/61244749/how-to-list-all-projects-in-gcp-that-belongs-to-a-specific-organization">https://stackoverflow.com/questions/61244749/how-to-list-all-projects-in-gcp-that-belongs-to-a-specific-organization</a></li><li><a href="https://stackoverflow.com/questions/72781977/move-project-to-a-different-organization">https://stackoverflow.com/questions/72781977/move-project-to-a-different-organization</a></li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*gPA047UcE_wPuQ4pHTefDA.png" /></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c7e254ab90af" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/how-to-migrate-projects-across-organizations-c7e254ab90af">Migrate ☁️ GCP projects across organizations, with gcloud</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My favourite Toolchain]]></title>
            <link>https://medium.com/@palladiusbonton/my-favourite-toolchain-831b56ba6fc5?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/831b56ba6fc5</guid>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Wed, 12 Apr 2023 11:31:45 GMT</pubDate>
            <atom:updated>2023-04-12T12:32:30.014Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Zpiw3oLXwzs37UElBG4mIA.png" /><figcaption>How <em>midjourney</em> imagines my favourite Toolchain, in 4 familiar colors ;)</figcaption></figure><p>Recently, my alter ego Richard asked a provocative question: are you happy with your toolchain, is it modern enough?</p><p>Before answering that question, o thought, first I need to assess it and enumerate it. Let’s see 🙈 what toolchain is:</p><ul><li><strong>Coding IDE</strong>: <strong>vscode</strong>. It is so amazing, I’ve tried something different, the OSS version, but it’s fast, extensible and just wow. The only missing thing is, a fast edit-over-ssh. But it’s not MS fault.</li><li><strong>Favourite language:</strong> <strong>Ruby</strong>. I know what you’re thinking, but it makes me happy, and efficient. I’ve tried other languages and frameworks, and nothing beats RoR in 2022 (I’ve spent 2 weekend to prove myself wrong, failing). If I need efficiency</li><li><strong>App Development: Ruby on Rails.</strong> I’ve given Js a go many times, it’s spectacular on many parts, but developing an app in a DRY way (rather than duplicating code for BE/FE) and having a single solid choice over a fragmentation of libs for me wins.</li><li><strong>CI: </strong>GCP <strong>Cloud Build</strong> and <a href="http://skaffoold.dev"><strong>skaffold</strong></a>. I might be biased as Googler here.</li><li><strong>CD</strong>: <strong>Cloud Deploy</strong> and <strong>GitHub actions</strong>. Again, biased 😊</li><li><strong>CI/CD</strong>: Skaffold plus GCP tooling on top of github repos. Use <strong>kustomize</strong> to DRY the manifests.</li><li><strong>Serverless</strong>: <strong>Cloud Run</strong> and <strong>App Engine</strong>. Never been a huge fan of Cloud functions, or maybe I just don’t get them :)</li><li><a href="https://en.wikipedia.org/wiki/Infrastructure_as_a_service"><strong>IaaS</strong></a><strong> : Google Cloud Platform</strong>. If you ask my favourite product, I’d say <strong>GCE</strong> as it was my first love.</li><li><strong>PaaS: App Engine </strong>+ <strong>Heroku</strong>.</li><li><strong>SaaS: GitHub, Google Workspace, Atlassian Bitbucket</strong>.</li><li><strong>Infra as Code:</strong> <strong>Pulumi</strong> and <strong>Terraform</strong>. Back in the days, <strong>Chef</strong>.</li><li><strong>kubernetes</strong>: I love <strong>GKE</strong> remotely, and <strong>minikube</strong> locally. <strong>Kustomize</strong> to DRY my manifests. Not a big fan of Helm, tried it and hated it. Kpt is in my TODO list.</li><li><strong>Docker</strong>: I love <strong>docker-compose</strong>, although it doesn’t scale much. For simple single-apps, I use that. For more complex stuff, skaffold.</li><li><strong>Testing</strong>: I invented a bash testing suite — a friend told me I’d become famous — I didn’t 😃. Happy to share code with you if you ask, and you’re back to the asylum tonight.</li></ul><p>More to follow…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*m80mWeOX7BXq_ooi.png" /><figcaption>Infra as Code is so hot right now!</figcaption></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=831b56ba6fc5" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ruby on Rails-like ORM and scaffolding in Golang anyone?]]></title>
            <link>https://medium.com/@palladiusbonton/ruby-on-rails-like-orm-in-golang-anyone-gopher-random-4558047da41?source=rss-b5293b96912f------2</link>
            <guid isPermaLink="false">https://medium.com/p/4558047da41</guid>
            <dc:creator><![CDATA[Riccardo Carlesso]]></dc:creator>
            <pubDate>Thu, 22 Dec 2022 09:16:13 GMT</pubDate>
            <atom:updated>2023-04-19T14:42:45.257Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w8gS6tqRhLiC88zPy8S6_A.jpeg" /><figcaption>This is a typical Gopher writing code… on Rails 🚈!</figcaption></figure><p>I ❤️ Ruby on Rails. With all my 💛. I can rapid-prototype any 3–4 models app in a couple of hours and do a POC in an afternoon, and this is thanks to scaffolding. I can write this and RoR will create a proper Model, Controller, and ~4 Views (MVC) and DB schema with rock-solid change-management :</p><pre>rails generate scaffold Album title:string year:decimal singer:reference<br>rails generate scaffold Track title:string duration:decimal album:references<br>rails generate scaffold Article title:string body:string comment:string rating:integer url:string is_public:boolean<br><br>bundle exec rake db:migrate</pre><p>However, my colleagues bully me that🔻Ruby is dead, 🚈 Rails is dead, and long live 📦 Node.Js and so on. So I thought: it’s 🎅 December, let’s learn a new language. I thought of learning C# — just kidding (I’m already a pianist)— I thought that Golang was the way to go. As of December 1st 🎅, everyone on Facebook has a single thing in mind: Whammageddon!</p><p>After taking a 2h course in Go and doing my first word count, my head got big and I thought: I’m now ready for the next step: a silly Whammageddon app to record my friends whammageddon spectacular stories!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/0*DdSJzp9ib9Un8Nf-.jpg" /><figcaption><strong>Whammageddon rules</strong> — if you just woke up from a criogenic coffin yesterday :)</figcaption></figure><h4>🚈 Golang on Rails options</h4><p>I tried (meaning, I spent 2 hours each) a few options (Bee, Revel, Buffalo), and I’ll describe them in order. Note that I might be unfair to the first in chronological order as my ability to go get something wasn’t as good as in try number 3 :)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*wSymZpyLJCBXn29b.png" /><figcaption>Queen Bee might be biased on who wins…</figcaption></figure><h4>1: 🐝 <a href="https://github.com/beego/beego">Beego</a></h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/757/1*I3y7zygaqbuHY2CMlqNIVQ.png" /><figcaption>Code source: <a href="https://github.com/beego/beego">https://github.com/beego/beego</a></figcaption></figure><p><a href="https://github.com/beego/beego">Beego</a> was the first Google result for “Ruby on Rails” for go. To be fair to bee, I was on a long flight to Israel and tried to make it work with jumpy airport internet and the experience was horrible (as a true Italian, I thought of filing a PR to enlarge gocapabilities with a new 4-letter verb). Nothing wrong with Bee, though.</p><p>This is how a migration looks like:</p><p><strong>Pros</strong> 😃:</p><ul><li>I really enjoyed its ability to simply create ORM model from CLI. Example:</li></ul><pre>$ bee generate scaffold riccardo_post -fields &#39;title:string,body:text,active:bool,published:datetime&#39;</pre><ul><li>It also allows to have different models connecting to different datasources (wOOt! I wonder how you do a JOIN from Europe to Australia). Example: ```</li></ul><pre>bee generate scaffold user -fields=&quot;first_name:string:255,last_name:string:255,email:string:255&quot; -driver=postgres -conn=&quot;postgres://user:pass@localhost:5432/db?sslmode=disable&quot;<br>bee generate scaffold riccpost -fields=&quot;title:string,body:text&quot; -driver=mysql -conn=&quot;root:@tcp(127.0.0.1:3306)/test&quot;</pre><ul><li>CLI allows to create docs and <strong>swagger</strong> interface on the fly via bee run -downdoc=true -gendoc=true .</li><li>I ~supports <strong>80%</strong> <strong>scaffolding</strong> for <strong>model</strong>, controllers, <strong>DB/migration</strong> but creates an empty view (<a href="https://github.com/beego/bee/issues/102">github issue</a>). In my case, it gets the controller dependencies wrong (probably because its a monorepo) and I need to manually fix it ( long path to beego-whammageddon/models). 😫</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m2ybLgp4pQgKU5OelQQ9lA.png" /><figcaption>It politely asks me if I want to create model, controller, resource, migration and migrate the DB itself! Wow!</figcaption></figure><ul><li>bee dockerize creates a Dockerfile for you. I’ve always wished for the same on RoR!</li></ul><p><strong>Cons </strong>😢<strong> :</strong></p><ul><li>Lack of Scaffolding capabilities on the <strong>view</strong> side. It rocks on model/migration, but it doesn’t create the needed views.</li><li>Scaffolding on Controller side seems broken to me. I get Method Not Allowed, which is answered <a href="https://stackoverflow.com/questions/28545260/configure-beego-router-to-serve-index-html-for-angularjs-non-server-routes">here</a> (missing Get()function — why would you do that?!?)</li></ul><h4>2. 🥳 <a href="https://revel.github.io/">Revel</a></h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/855/0*auID_UEO9MIMprUk.png" /><figcaption>Source: <a href="https://revel.github.io/">https://revel.github.io/</a></figcaption></figure><p>When <a href="https://levelup.gitconnected.com/golang-beego-vs-revel-how-to-choose-63ee8f081bc3">I read from Amrit</a>: “ If you have used Ruby on Rails, you are going to love Revel. If you are a Python developer who has used Django, you will like Beego.” I felt: what have I done in the past 4 hours?!? I had an agnition, or shall I say… a revelation!!</p><p>Revel has a very simple and straightforward <a href="http://revel.github.io/tutorial/firstapp.html">docs page</a> which will guide you through a multi-page, stateless form-rich hello world within 10 minutes.</p><p>It has <a href="https://github.com/revel/modules"><strong>modules</strong></a> (pluggable packages) for NewRelic, Static files, Logging, ..</p><p>It has nice <a href="https://github.com/revel/examples"><strong>examples</strong></a> repos; the closest to Ror seems to be the Booking app (<a href="https://revel.github.io/examples/booking.html">docs</a> — <a href="https://github.com/revel/examples/tree/master/booking">code</a>). Code is from 2020.</p><p>It uses <a href="https://github.com/go-gorp/gorp">GORP</a> as ORM. However, after first excitement, I realized also Revel lacks a proper way to scaffold</p><p>I was too stupid to make it work and I threw the sponge. Hoewver with 2 lines you can actually get this — wow!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/715/1*tSpbPlJ-wQ8wrB07WbIqow.png" /></figure><p>Commands to achieve this (copied from <a href="https://github.com/revel/examples">here</a>):</p><pre>git clone https://github.com/revel/examples.git &quot;${GOPATH}/src/github.com/revel/examples&quot;<br>#DOESNT WORK FOR ME - I might be stuipid<br>revel run github.com/revel/examples/booking<br># THIS WORKS FOR ME<br>revel run &quot;${GOPATH}/src/github.com/revel/examples&quot;</pre><p>So if you have time to understand and reverse engineer the booking app, you’re going to enjoy Revel a lot. However, the inability to scaffold from scratch is a real turn off for me.</p><p>Here I totally failed to do any scaffolding: no model/controller/view for me. I’ll probably spend some time in the weekend reverse-engineering the booking app… 😢</p><h4>3. 🦬<a href="https://gobuffalo.io/">Buffalo</a></h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7OoJFpCz1UHBeHudcME5Gw.png" /><figcaption>source: <a href="https://gobuffalo.io/">https://gobuffalo.io/</a></figcaption></figure><p>Now, the first thing you see with Buffalo is — wOOt? They even bothered adding a CSS! Clearly, there’s some money and a real company behind this (like DHH and Basecamp behind Rails). Graphics is captivating and I love it already!</p><p>First, it uses <a href="https://gobuffalo.io/documentation/database/pop/"><strong>pop</strong></a> which supports PostgreS Cockroach MySQL and Sqlite3 out of the box.</p><p>With <a href="https://gobuffalo.io/documentation/database/soda/">Soda</a> and <a href="https://gobuffalo.io/documentation/database/fizz/">Fizz</a>, you get a Rails-like experience in setting up the DB and migrating it:</p><pre>// migrate UP<br>create_table(&quot;users&quot;) {<br>  t.Column(&quot;email&quot;, &quot;string&quot;, {})<br>  t.Column(&quot;twitter_handle&quot;, &quot;string&quot;, {&quot;size&quot;: 50})<br>  t.Column(&quot;age&quot;, &quot;integer&quot;, {&quot;default&quot;: 0})<br>  t.Column(&quot;admin&quot;, &quot;bool&quot;, {&quot;default&quot;: false})<br>  t.Column(&quot;company_id&quot;, &quot;uuid&quot;, {&quot;default_raw&quot;: &quot;uuid_generate_v1()&quot;})<br>  t.Column(&quot;bio&quot;, &quot;text&quot;, {&quot;null&quot;: true})<br>  t.Column(&quot;joined_at&quot;, &quot;timestamp&quot;, {})<br>}<br><br>// migrate down<br>drop_table(&quot;users&quot;)</pre><p>This is absolutely fantastic ! Unfortunately it doesn’t seem to have the CLI interface to create a scaffold 😐, while you can reach a great experience by typing the code yourself.</p><p>To use generators, it looks to me you need to install pop as a separate module: <a href="https://github.com/gobuffalo/buffalo-pop">https://github.com/gobuffalo/buffalo-pop</a>. After doing so, you get buffalo pop g --help which returns <a href="https://gobuffalo.io/documentation/database/generators/">this same output</a>. (Before, it would return a weird output).</p><p>Now, I was able with a single command line (non documented anywhere, just by trying out!) to create a new model with my fields and also its migration, but not the controller and the views :/</p><pre><br># For &#39;--skip-migration&#39; read below<br>buffalo pop g model --skip-migration foobar RiccTitle:string RiccDescription:text<br>buffalo pop g model --skip-migration barbaz RiccDescription:text UltimateAnswer:int32 Active:bool</pre><p>Note: he first time you call the function without skip miogration, but every subsequent invocation it will create another migration for the same model; so if you just want to auto-magically update the model until you got it right, you call it as above.</p><p>Like in Rails, DB can be easily configured in a single YAML or via ENV variables.</p><pre># database.yaml<br>development:<br>  dialect: postgres<br>  database: whamageddon_buffalo_development<br>  user: postgres<br>  password: postgres<br>  host: 127.0.0.1<br>  pool: 5<br><br>test:<br>  url: {{envOr &quot;TEST_DATABASE_URL&quot; &quot;postgres://postgres:postgres@127.0.0.1:5432/whamageddon_buffalo_test?sslmode=disable&quot;}}<br><br>production:<br>  url: {{envOr &quot;DATABASE_URL&quot; &quot;postgres://postgres:postgres@127.0.0.1:5432/whamageddon_buffalo_production?sslmode=disable&quot;}}</pre><h4>[Golang vs Ruby] on ORM and Scaffolding</h4><p>So my first impressions on Go (vs Ruby):</p><ul><li>➕blazing fast</li><li>➕compile in a single binary — easy to dockerize/ship.</li><li>➖ Go has a tendency to want your app to be single repo. What if I want to have 3 folders under the same repo — can I <em>Mr Go</em>?</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0iP_R7AzQVGITIANUNtAuw.png" /><figcaption>No thanks Mr Go :)</figcaption></figure><ul><li>➖ Lack of a convincing zero-brain scaffolding technique.</li></ul><h4>Conclusions</h4><p>Like Bonucci told the Brits at the end of European Championship in London, <em>“</em><a href="https://www.youtube.com/watch?v=69WrQRHicKU"><em>ne dovete mangiare di pastasciutta!</em></a><em>”</em> (<em>you still have a lot of pasta to eat</em>), I believe Golang has still a long way to go to get to Ruby feasts when it comes to ORM and Rails rapid-prototyping.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/498/0*rwZiolVj9MrM3-Pf.gif" /><figcaption>Bonucci is a recognized national hero in Italy after this. Expect rolling the arm gesture to catch up with emojipedia starting v14.0!</figcaption></figure><p>This morning, while swimming, I wanted to create a nice table with 3–5 stars for all, but Medium doesn’t support tables. Hence I’ll just get the winner per topic:</p><ul><li>Documentation: <strong>revel</strong> &amp; <strong>buffalo</strong></li><li>Look and feel: <strong>Buffalo</strong></li><li>Documentation for day-0 hello app: <strong>revel</strong>.</li><li>Model CLI creation: <strong>beego</strong>.</li><li>Migration: <strong>Buffalo</strong> (thanks to <strong>fizz</strong>)</li><li>Scaffolding: <strong>none </strong><em>(rails rulez)</em>.</li></ul><p>However, go has a long list of advantages that makes this passage worthwhile:</p><ul><li>damn easy <em>dockerization</em> (single chubby binary)</li><li>no dependencies craze in prod (single chubby binary)</li></ul><p>Note there are also other solution apart from Bee, Revel and Buffalo: <a href="https://github.com/gin-gonic/gin"><strong>Gin&amp;Gonic</strong></a>, <a href="https://github.com/goji/goji"><strong>Goji</strong></a>, <a href="https://github.com/kataras/iris-cli">Iris</a>, … and I hear <strong>echo</strong> also strikes a great balance (think of Sinatra if you’re a rubyist).</p><p><strong>Note</strong>. I’m a ~day1 user of Go. I’m pretty sure some things I’ve said might be incorrect. I’d be honoured to get your feedback in form of comments.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4558047da41" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>