<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Polong Lin on Medium]]></title>
        <description><![CDATA[Stories by Polong Lin on Medium]]></description>
        <link>https://medium.com/@polong?source=rss-e72de348ba0f------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*S1BKLD5XHLLLtCOGWD2-jw.png</url>
            <title>Stories by Polong Lin on Medium</title>
            <link>https://medium.com/@polong?source=rss-e72de348ba0f------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 04 Jul 2024 15:29:28 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@polong/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[How to build a recommendation system on e-commerce data using BigQuery ML]]></title>
            <link>https://medium.com/google-cloud/how-to-build-a-recommendation-system-on-e-commerce-data-using-bigquery-ml-df9af2b8c110?source=rss-e72de348ba0f------2</link>
            <guid isPermaLink="false">https://medium.com/p/df9af2b8c110</guid>
            <category><![CDATA[ecommerce]]></category>
            <category><![CDATA[data-science]]></category>
            <category><![CDATA[recommendation-system]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[business]]></category>
            <dc:creator><![CDATA[Polong Lin]]></dc:creator>
            <pubDate>Mon, 13 Jul 2020 10:53:01 GMT</pubDate>
            <atom:updated>2020-09-08T15:33:35.682Z</atom:updated>
            <content:encoded><![CDATA[<p>With your data in BigQuery, machine learning workflows are now easier than ever with BigQuery ML. In this post you’ll learn how to build a product recommendation system in a retail scenario using matrix factorization, and how to use the predicted recommendations to drive marketing activation.</p><h3>Why are recommendation systems so important?</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*sZTLfKzKRmMOSL-2" /><figcaption>Photo by <a href="https://medium.com/u/92410629f98b">rupixen</a>: <a href="https://unsplash.com/photos/Q59HmzK38eQ">https://unsplash.com/photos/Q59HmzK38eQ</a></figcaption></figure><p>The majority of consumers today expect personalization — to see products and services relevant to their interests. Naturally, they can help businesses too. By learning from user behaviours and preferences, businesses can deliver their recommendations in a variety of ways, including personalized coupons, marketing emails, and search results, or targeted ads. Ultimately, this enables businesses to attract more customer spending with targeted cross-selling or upselling, while reducing unnecessary costs by marketing irrelevant products.</p><blockquote><em>“Companies that fail to show customers they know them and their buying preferences risk losing business to competitors who are more attuned to what their customers want.” <br>- Harvard Business Review. “The Age of Personalization”. September 2018</em></blockquote><h3>How do recommendation systems work?</h3><p>Based on user preferences, matrix factorization (collaborative filtering) is one of the most common and effective methods of creating recommendation systems. For more information about how they work, see <a href="https://developers.google.com/machine-learning/recommendation/collaborative/matrix">this introduction to recommendation systems here</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Pf7sy-QuSW6Ig88qpQ8vkw.png" /><figcaption><a href="https://developers.google.com/machine-learning/recommendation/collaborative/matrix">https://developers.google.com/machine-learning/recommendation/collaborative/matrix</a></figcaption></figure><h3>What is BigQuery ML?</h3><p><a href="https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro">BigQuery ML</a> enables users to create and execute machine learning models in BigQuery by using standard SQL queries. This means, if your data is already in BigQuery, you don’t need to export your data to train and deploy machine learning models — by training, you’re also deploying in the same step. Combined with BigQuery’s auto-scaling of compute resources, you won’t have to worry about spinning up a cluster or building a model training and deployment pipeline. This means you’ll be saving time building your machine learning pipeline, enabling your business to focus more on the value of machine learning instead of spending time setting up the infrastructure.</p><p>You may have also heard of <a href="https://cloud.google.com/recommendations">Recommendations AI</a>, a Google Cloud product purpose-built for real-time recommendations on a website using state-of-the-art deep learning models. Matrix factorization with BigQuery ML, on the other hand, is a more generic ML algorithm that can be used for offline and online recommendations (e.g. personalized e-mail campaigns).</p><h3>Training &amp; deploying a matrix factorization model on e-commerce data using BigQuery ML</h3><p>Let’s go through an example of how to identify what other products you would recommend to a user, based on how long they’ve viewed a product on an online store. You can also view the <a href="https://github.com/GoogleCloudPlatform/analytics-componentized-patterns/blob/master/retail/recommendation-system/bqml/bqml_retail_recommendation_system.ipynb">Jupyter notebook version of this blogpost here</a>.</p><h3>The data</h3><p>The <a href="https://console.cloud.google.com/marketplace/details/obfuscated-ga360-data/obfuscated-ga360-data?filter=solution-type:dataset">Google Analytics Sample dataset</a>, which is hosted publicly on BigQuery, is a dataset that provides 12 months (August 2016 to August 2017) of obfuscated Google Analytics 360 data from the <a href="https://www.googlemerchandisestore.com/">Google Merchandise Store</a>, a real e-commerce store that sells Google-branded merchandise.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QlzMX9HAkGcAB9dHrLQ0Eg.png" /><figcaption>Screenshot from the <a href="http://www.googlemerchandisestore.com">Google Merchandise Store</a>.</figcaption></figure><p>Here’s a sample of some of the raw data from Google Analytics:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*_Rc-Q3bBtv2GSBTY" /></figure><h3>Pre-process the data</h3><p>There are two types of matrix factorization based on the kind of user feedback: explicit and implicit. With explicit feedback, the dataset must indicate a user’s preference for a product, like a rating between 1 and 5 stars.</p><p>Unless a large number of users provide reviews of products, there is no or insufficient explicit feedback on how much a user liked a product. In such cases, other behavioral metrics need to be used to <em>infer</em> their implicit preference. One way to infer interest in a product is to consider the total time a user spends on a product detail page (e.g., session duration).</p><h4>What should the training data look like?</h4><p>With matrix factorization, in order to train the model, you will need a table with <strong>userId</strong>, <strong>itemId</strong>, and the <strong>rating</strong>. In this example, session duration on a product page will be used as the implicit rating. If you have other metrics (e.g., frequency of pageviews), you can simply combine the metrics together using a weighted sum to compute a rating value.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/828/0*xhKsTfQg0AKBiku5" /></figure><p><em>Example of cleaned training data for matrix factorization, <br>where session duration (in milliseconds) on a product page is used as the implicit rating</em></p><p>Using the Google Analytics Sample, we can create a table containing the pre-processed training data:</p><pre>## follows schema from <a href="https://support.google.com/analytics/answer/3437719?hl=en&amp;ref_topic=3416089">https://support.google.com/analytics/answer/3437719?hl=en&amp;ref_topic=3416089</a></pre><pre>CREATE OR REPLACE TABLE bqml.aggregate_web_stats AS (<br>  WITH<br>    durations AS (<br>      --calculate pageview durations<br>      SELECT<br>        CONCAT(fullVisitorID,&#39;-&#39;, <br>             CAST(visitNumber AS STRING),&#39;-&#39;, <br>             CAST(hitNumber AS STRING) ) AS visitorId_session_hit,<br>        LEAD(time, 1) OVER (<br>          PARTITION BY CONCAT(fullVisitorID,&#39;-&#39;,CAST(visitNumber AS STRING))<br>          ORDER BY<br>          time ASC ) - time AS pageview_duration<br>      FROM<br>        `bigquery-public-data.google_analytics_sample.ga_sessions_2016*`,<br>        UNNEST(hits) AS hit <br>    ),<br>      <br>    prodview_durations AS (<br>      --filter for product detail pages only<br>      SELECT<br>        CONCAT(fullVisitorID,&#39;-&#39;,CAST(visitNumber AS STRING)) AS visitorId,<br>        productSKU AS itemId,<br>        IFNULL(dur.pageview_duration,<br>          1) AS pageview_duration,<br>      FROM<br>        `bigquery-public-data.google_analytics_sample.ga_sessions_2016*` t,<br>        UNNEST(hits) AS hits,<br>        UNNEST(hits.product) AS hits_product<br>      JOIN<br>        durations dur<br>      ON<br>        CONCAT(fullVisitorID,&#39;-&#39;,<br>               CAST(visitNumber AS STRING),&#39;-&#39;,<br>               CAST(hitNumber AS STRING)) = dur.visitorId_session_hit<br>      WHERE<br>      #action_type: Product detail views = 2<br>      eCommerceAction.action_type = &quot;2&quot; <br>    ),<br>    <br>    aggregate_web_stats AS(<br>      --sum pageview durations by visitorId, itemId<br>      SELECT<br>        visitorId,<br>        itemId,<br>        SUM(pageview_duration) AS session_duration<br>      FROM<br>        prodview_durations<br>      GROUP BY<br>        visitorId,<br>        itemId )<br>    SELECT<br>      *<br>    FROM<br>      aggregate_web_stats<br>);</pre><pre>-- Show table<br>SELECT<br>  *<br>FROM<br>  bqml.aggregate_web_stats<br>LIMIT<br>  10</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/982/0*npI10bbRfRSt22c6" /></figure><p>Now we’re ready to train the matrix factorization model.</p><p>If you’d prefer to see this blogpost in a Jupyter notebook format, you can view it directly on Github:</p><p><a href="https://github.com/GoogleCloudPlatform/analytics-componentized-patterns/blob/master/retail/recommendation-system/bqml/bqml_retail_recommendation_system.ipynb">https://github.com/GoogleCloudPlatform/analytics-componentized-patterns/blob/master/retail/recommendation-system/bqml/bqml_retail_recommendation_system.ipynb</a></p><h3>Training the Matrix Factorization model in BigQuery ML</h3><p>To train the matrix factorization model (with implicit feedback), you will need to set the options:</p><ul><li>model_type: ‘matrix_factorization’</li><li>user_col: &lt;user column name&gt;</li><li>item_col: &lt;item column name&gt;</li><li>rating_col: &lt;rating column name&gt;</li><li>feedback_type: ‘implicit’ (default is ‘explicit’)</li></ul><p>To learn more about the parameters when training a model, read the <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-matrix-factorization">documentation on the CREATE MODEL statement for Matrix Factorization</a>.</p><pre>CREATE OR REPLACE MODEL bqml.retail_recommender<br>OPTIONS(model_type=&#39;matrix_factorization&#39;, <br>        user_col=&#39;visitorId&#39;, <br>        item_col=&#39;itemId&#39;,<br>        rating_col=&#39;session_duration&#39;,<br>        feedback_type=&#39;implicit&#39;<br>        )<br>AS<br>SELECT * FROM bqml.aggregate_web_stats</pre><p><em>Note</em>: <em>You may need to setup slot reservations. For more information, you can read up on how to set up flex slots </em><a href="https://medium.com/google-cloud/optimize-bigquery-costs-with-flex-slots-e06ec5e4aa90"><em>programmatically</em></a><em> or via the </em><a href="https://cloud.google.com/bigquery/docs/reservations-workload-management#getting-started-with-bigquery-reservations"><em>BigQuery UI</em></a><em>.</em></p><h3>Model Evaluation</h3><p>After completing training, our model is now deployed (as bqml.retail_commender). You can inspect the resulting metrics from model evaluation.</p><p>For more information on these metrics, read the <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate">ML.EVALUATE documentation here</a>.</p><pre>SELECT<br>  *<br>FROM<br>  ML.EVALUATE(MODEL bqml.retail_recommender)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Dd04r-kPk3bjWCPR" /></figure><h3>Hyperparameter Tuning</h3><p>If you want to improve your model, some of the hyperparameters you can tune are:</p><ul><li>NUM_FACTORS: Specifies the number of latent factors to use for matrix factorization models (int64_value)</li><li>L2_REG: The amount of L2 regularization applied (float64_value)</li><li>WALS_ALPHA: A hyperparameter for ‘IMPLICIT’ matrix factorization model (float64_value)</li></ul><p>Check out <a href="https://towardsdatascience.com/how-to-do-hyperparameter-tuning-of-a-bigquery-ml-model-29ba273a6563">this blogpost for more information on hyperparameter tuning in BigQuery ML</a>.</p><h3>Making Predictions using ML.RECOMMEND</h3><p>Let’s do a quick check on what the resulting recommendations look like. What are the top 5 items you could recommend to a specific visitorId? Note that I’ve used a bit of <a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting">SQL scripting</a> to help us check for a specific visitor.</p><pre>DECLARE MY_VISITORID STRING DEFAULT &quot;0824461277962362623-1&quot;;</pre><pre>SELECT<br>  *<br>FROM<br>  ML.RECOMMEND(MODEL `bqml.retail_recommender`,<br>      (SELECT MY_VISITORID as visitorID)<br>              )<br>ORDER BY predicted_session_duration_confidence DESC<br>LIMIT 5</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*hfBwu8PG5a-_PiK8" /></figure><p>Ordered descendingly by the confidence score, these show the top 5 items for this particular visitorId.</p><p>Let’s add in the product names by joining with productSKU so we can see what the recommended products actually are:</p><pre>DECLARE<br>  MY_VISITORID STRING DEFAULT &quot;6499749315992064304-2&quot;;<br>WITH<br>  product_details AS(<br>  SELECT<br>    productSKU,<br>    v2ProductName,<br>  FROM<br>    `bigquery-public-data.google_analytics_sample.ga_sessions_2016*`,<br>    UNNEST(hits) AS hits,<br>    UNNEST(hits.product) AS hits_product<br>  GROUP BY<br>    2,<br>    1 )<br>SELECT<br>  r.*,<br>  d.v2ProductName<br>FROM<br>  ML.RECOMMEND(MODEL `bqml.retail_recommender`,<br>    (<br>    SELECT<br>      MY_VISITORID AS visitorId)) r<br>JOIN<br>  product_details d<br>ON<br>  r.itemId = d.productSKU<br>ORDER BY<br>  predicted_session_duration_confidence DESC<br>LIMIT<br>  5</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WkDXrTWLJ5nV3AX4HCw4PQ.png" /><figcaption>Product recommendations for this visitor</figcaption></figure><p>What about for all visitors? Since the resulting output can be a bit large, I’ve outputted the results to a table:</p><pre>-- Create output table of top 5 predictions<br>CREATE OR REPLACE TABLE bqml.prod_recommendations AS (<br>WITH predictions AS (<br>    SELECT <br>      visitorId, <br>      ARRAY_AGG(STRUCT(itemId, <br>                       predicted_session_duration_confidence)<br>                ORDER BY <br>                  predicted_session_duration_confidence DESC<br>                LIMIT 5) as recommended<br>    FROM ML.RECOMMEND(MODEL bqml.retail_recommender)<br>    GROUP BY visitorId<br>)</pre><pre>SELECT<br>  visitorId,<br>  itemId,<br>  predicted_session_duration_confidence<br>FROM<br>  predictions p,<br>  UNNEST(recommended)<br>);</pre><pre>-- Show table<br>SELECT<br>  *<br>FROM<br>  bqml.prod_recommendations<br>ORDER BY <br>  visitorId<br>LIMIT<br>  10</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*88AmXuScgzTOB7Td" /></figure><h3>Using the predicted recommendations in production</h3><p>Once you have the recommendations, plugging into your production pipeline will depend on your use case.</p><p>Here are a few possible ways to help you get started:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_udFSQH3cMp7eMEERFY9SQ.png" /></figure><p><strong>A. Export recommendations for marketing activation</strong></p><ol><li>For activation via Google Ads, Display &amp; Video 360 and Search Ads 360</li><li>For activation via emails</li></ol><p><strong>B. Other ways to export recommendations from BigQuery</strong></p><ol><li>BigQuery to pandas dataframe</li><li>Export the predictions to Google Cloud Storage</li></ol><p>By exporting the resulting predictions from BigQuery ML back to Google Analytics, you will be able to generate custom remarketing audiences and target customers more effectively with ads, search, or email activation.</p><h3>A-1. Export recommendations to Google Analytics 360 (Google Marketing Platform)</h3><h4>Formatting the data for Google Analytics 360</h4><p>You may need to format the data output into something that Google Analytics can directly use, for example:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/892/0*RKf5Qx8w79Q4zBUi" /></figure><p>Here’s a sample query for an itemId GGOEYOLR018699, that normalizes the confidence scores between 0 and 1, using <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-preprocessing-functions#mlmin_max_scaler">ML.MIN_MAX_SCALER</a>:</p><pre>WITH predictions AS (<br>    SELECT <br>      visitorId, <br>      ARRAY_AGG(STRUCT(itemId, <br>                       predicted_session_duration_confidence)<br>                ORDER BY <br>                  predicted_session_duration_confidence) as recommended<br>    FROM ML.RECOMMEND(MODEL bqml.retail_recommender)<br>    WHERE itemId = &quot;GGOEYOLR018699&quot;<br>    GROUP BY visitorId<br>)<br>  <br>SELECT<br>  visitorId,<br>  ML.MIN_MAX_SCALER(predicted_session_duration_confidence) OVER() as GGOEYOLR018699<br>FROM<br>  predictions p,<br>  UNNEST(recommended)<br>ORDER BY GGOEYOLR018699 DESC</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/708/0*iw97o6Sn_x3JdzRx" /></figure><p>To create a column per product, you can use the pivot() function as described in <a href="https://towardsdatascience.com/easy-pivot-in-bigquery-one-step-5a1f13c6c710">this blogpost</a>.</p><p>For Google Analytics Data Import, it’s recommended that you use clientId as the key, along with individual columns that show some propensity score. In other words, you may need to create a new column for each product that you are interested in recommending, and create a custom dimension in Google Analytics that can be then used to build your audiences. It’s also likely best to ensure that you have one row per clientId. If you know you will be exporting predictions to Google Analytics, it’s recommended that you train your models using clientId directly instead of visitorId.</p><p><strong>Exporting the data from BigQuery into Google Analytics 360</strong></p><p>The easiest way to export your BigQuery ML predictions from a BigQuery table to Google Analytics 360 is to use the <a href="https://github.com/google/modem">MoDeM (Model Deployment for Marketing)</a> reference implementation. MoDeM helps you load data into Google Analytics for eventual activation in Google Ads, Display &amp; Video 360 and Search Ads 360</p><p>To export to Google Analytics 360 from BigQuery:</p><ul><li><a href="https://github.com/google/modem/tree/master/bqml">Follow the step-by-step instructions here</a> to build your ETL pipeline from BigQuery ML to Google Analytics using MoDeM. You can also view the interactive instructions in this <a href="https://colab.research.google.com/github/google/modem/blob/master/bqml/utils/BQML_Deployment_Template_Cloud_Function.ipynb">notebook</a>.</li></ul><h4>A-2. Email activation using Salesforce Marketing Cloud</h4><p>As Google Analytics does not contain email addresses, you may need to integrate with a 3rd-party platform like Salesforce Marketing Cloud for email activations.</p><p>Google Analytics 360 customers can activate their Analytics 360 audiences in Marketing Cloud on Salesforce direct marketing channels (email and SMS). This enables your marketing team to build audiences based on online web behavior and engage with those customers via emails and SMS.</p><p>Follow the <a href="https://support.google.com/analytics/answer/9250031?hl=en">step-by-step instructions here</a> to integrate Google Analytics 360 with Salesforce Marketing Cloud, or learn more about <a href="https://trailhead.salesforce.com/content/learn/modules/google-analytics-360-integration-for-marketing-cloud">Audience Activation through Salesforce Trailhead</a>.</p><h3>B. Other ways to export recommendations from BigQuery</h3><h4>B-1. BigQuery to pandas dataframe</h4><p>With the predictions stored in a separate table, you can export the data into a Pandas dataframe using the BigQuery Storage API (see <a href="https://cloud.google.com/bigquery/docs/bigquery-storage-python-pandas#download_table_data_using_the_client_library">documentation and code samples</a>). You can also use <a href="https://cloud.google.com/bigquery/docs/reference/libraries">other BigQuery client libraries</a>.</p><h4>B-2. Export predictions table to Google Cloud Storage</h4><p>There are several ways to export the predictions table to Google Cloud Storage, so that you can use them in a separate service. This <a href="https://cloud.google.com/bigquery/docs/exporting-data#exporting_table_data">documentation</a> shows you, amongst other ways, how to export using the bq extract command.</p><h3>Summary</h3><p>Congratulations! You now know how to train your recommendation system using BigQuery ML, evaluate your model, tune hyperparameters and deploy your model, and use the results in production. Your business is now one step closer to being more personalized for your customers.</p><h3>Want more?</h3><p>Please leave me your comments with any suggestions or corrections.</p><p>I’m Polong Lin, a Developer Advocate for Google Cloud. Follow me on <a href="http://www.twitter.com/polonglin">@polonglin</a>, and all about BigQuery on reddit.com/r/bigquery.</p><p><strong>Thanks to reviewers</strong>: Abhishek Kashyap, Lak Lakshmanan, Tai Conley, Rebecca Gutteridge, Oly Bhaumik, Marc Cohen, Tahir Fayyaz, Felipe Hoffa.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=df9af2b8c110" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/how-to-build-a-recommendation-system-on-e-commerce-data-using-bigquery-ml-df9af2b8c110">How to build a recommendation system on e-commerce data using BigQuery ML</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>