<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Megan O’Keefe on Medium]]></title>
        <description><![CDATA[Stories by Megan O’Keefe on Medium]]></description>
        <link>https://medium.com/@askmeegs?source=rss-db638f78c20f------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*SNqXoWSCESSIbpmjHUHrlQ.jpeg</url>
            <title>Stories by Megan O’Keefe on Medium</title>
            <link>https://medium.com/@askmeegs?source=rss-db638f78c20f------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 04 Jul 2024 15:28:53 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@askmeegs/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[One Year in Cloud Developer Relations]]></title>
            <link>https://medium.com/@askmeegs/one-year-in-devrel-21b516fdaa05?source=rss-db638f78c20f------2</link>
            <guid isPermaLink="false">https://medium.com/p/21b516fdaa05</guid>
            <category><![CDATA[developer-relations]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[developer]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[career-advice]]></category>
            <dc:creator><![CDATA[Megan O’Keefe]]></dc:creator>
            <pubDate>Tue, 03 Sep 2019 14:57:09 GMT</pubDate>
            <atom:updated>2019-09-03T21:37:38.100Z</atom:updated>
            <content:encoded><![CDATA[<p>Last August, I moved from Software Engineering to a role in <a href="https://medium.com/google-developers/the-core-competencies-of-developer-relations-f3e1c04c0f5b">Developer Relations</a> at Google Cloud. Since then, I have helped users adopt technologies like <a href="https://cloud.google.com/blog/products/networking/welcome-to-the-service-mesh-era-introducing-a-new-istio-blog-post-series?utm_content=bufferc367a&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">Istio</a>, moved across the country (twice), spoken at multiple <a href="https://www.youtube.com/watch?v=7cINRP0BFY8">conferences</a>, turned twenty-five, and became my team’s tech lead.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*b4KhUScaRzC4lOCifmOd6w.png" /><figcaption><a href="https://www.youtube.com/watch?v=7cINRP0BFY8">at Google Cloud NEXT ‘19</a></figcaption></figure><p>It’s been a fun, challenging year. Here are four lessons I’ve learned along the way.</p><h3>1) Willingness to learn &gt; everything else.</h3><p>When I started in this role, I was worried that I didn’t have enough experience. I had only been a “real” software engineer for two years, and at Google, I was immediately surrounded by smart, qualified people, many with years of experience. I felt like I had an impossible amount to learn in order to catch up.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*BiFxuBTgAklppKstiUAbIQ.gif" /><figcaption><a href="https://giphy.com/gifs/parks-and-recreation-andy-dwyer-2cSiOvuoTRTGM">source</a></figcaption></figure><p>But here’s the thing. <strong>You don’t have to know everything </strong>about a certain technology or product in order to do effective DevRel. Developer Relations is about empathy — listening to users — and then forwarding their feedback to product teams. It’s also about creating content, whether that’s building new tools or samples, writing a tutorial, <a href="https://medium.com/hubspot-product/customer-empathy-sessions-a-tool-for-better-understanding-your-users-7f51e6d0a748">running an empathy session</a>, or giving a talk. So usually, by the time you’re creating content, you’ve already built up expertise about the product or feature in question.</p><p>In my case, listening to why customers were interested in Istio, and the successes and challenges they had adopting it, was one of the best ways to learn about the project. I learned quickly what a service mesh was for, and in the process of reading the docs, had <a href="http://www.thagomizer.com/blog/2018/08/22/friction-logs.html"><strong>fresh eyes </strong>for where gaps existed</a> in the product.</p><p>I think that for DevRel, more important than having a brain full of knowledge is a <strong>readiness to learn</strong> from users. The tech industry can change quickly, and you might do DevRel for many products over time. I don’t think you need many years of experience to create impactful content. But I think you do have to invest the time to continuously pick up new technologies.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Y6o32KR8mc7PQ1bu" /><figcaption><a href="https://twitter.com/outofcontextBA/status/1154740056894181379/photo/1">source</a></figcaption></figure><p>Still, there will always be questions you can’t answer — <em>how does </em><a href="https://askmeegs.dev/posts/notes-project/"><em>Firestore work with Kubernetes</em></a><em>? What is </em><a href="https://en.wikipedia.org/wiki/SOAP"><em>SOAP</em></a><em>??</em> — and for those questions, I can turn to one of my awesome colleagues. Almost always, they can point me in the right direction. Which brings me to:</p><h3>2) People matter.</h3><p>DevRel can sometimes feel solitary. Because there are a lot of users to hear from, those connections can be short-lived. There is a not-insignificant amount of travel, and often, my teammates and I are working on different projects, with different teams.</p><p>I think the nature of DevRel <strong>raises the stakes on the peopl</strong>e you work with. Why? Because I think that in order to feel supported at work, you need a safe place to land: places where you can share triumphs and struggles, ask for feedback, engage in off-topic discussions about baking.</p><p>And these relationships can go two ways: you can TA your teammates’ workshops, summarize articles for a group chat, help other DevRellers practice their talks, answer <em>their </em>questions (<em>What’s a </em><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes"><em>PVC</em></a><em>??</em>). I have been lucky to have multiple mentors since joining Google, who encouraged me to start communicating feedback to product teams within a few weeks of my start date. I am so grateful for them, and for the confidence they helped me build early on.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/446/1*Ch7n_HbnkN7iaiOAx8jIyw.gif" /><figcaption><a href="https://thumbs.gfycat.com/SoftPaltryBernesemountaindog-size_restricted.gif">source</a></figcaption></figure><p>In DevRel, there are also lots of <em>other</em><strong> </strong>people, internally, to talk to. For me, this means the <strong>partner teams</strong> for the Google products I represent externally. This includes product managers, engineers, tech writers, marketing. These are the people I usually talk to most<em> </em>during any given weekday. For this reason, it matters <em>a lot</em> to work with a product team that is receptive to your feedback, interested in DevRel’s help, willing to answer questions, willing to invite you to customer meetings, and <strong>excited about improving their product.</strong></p><h3><strong>3) Your calendar is not your friend.</strong></h3><p>When I moved into this role from Software Engineering, the most drastic difference in my working life was not the programming languages I used, or the products I worked with. It was meetings.</p><p>On an average weekday, I have 6–8 meetings: with users, the open-source community, product managers, engineering leads, UX researchers, and my own team within DevRel.</p><p>I’m an introvert, so meetings drain my battery, even if in a good way, and they can also disrupt uninterrupted time to write code, create new content, and otherwise think deeply about things. This means that <strong>I have to protect my time.</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*wx8FHyymGylUnpEkLVLYqw.gif" /><figcaption><a href="https://media1.giphy.com/media/3PYDr80PbJBv2/source.gif">source</a></figcaption></figure><p>Because I sit on the east coast and most of my colleagues are out west, I usually have a few quiet hours in the morning to get things done. But I certainly have not mastered time management for DevRel; I find it especially challenging to decline meetings with people I’m actively working with. I don’t want to let them down, or make it look like I don’t care! If you have advice about this, do comment down below.</p><h3>4) Work-life balance gets tougher.</h3><p>DevRel is a people job. My job is not to sell products, or to build them. It’s to connect people to Google’s technology, hear from them about how they’re using it, what they don’t like, and then to make things better. This means that often, you might hear more about the “bad” than the “good.” I think this can lead to a mindset of obligation to fix <em>all </em>the things. Especially true if the total DevRel footprint for a certain product is small.</p><p>Also, there will probably be an endless backlog of things to do. There will be features to champion, bugs to file, docs to review, tweets to compose. All of this, coupled with the fact that I really <em>like </em>my job, makes work-life balance much harder than it was when I was a Software Engineer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*7Ubu8j0rWJxSylO9dvj4zw.gif" /><figcaption><a href="https://gph.is/1V2Z0bj">source</a></figcaption></figure><p>The best strategy I’ve learned to cope with this is pretty simple, which is to leave work at the office as much as possible, not have anything work-related on my phone, and use my weekends to actively spend time with friends and family, do fun things, and sleep. Sleep is important. But again, I haven’t totally figured this out. Actually this is the thing I definitely have not figured out.</p><p>Working in Developer Relations has helped me grow in many ways, and I’m grateful to all my colleagues for making my first year a great one.</p><p>That said, no job is perfect. There are tradeoffs. I’m definitely writing less code than before. But every day, I get to flex a different set of muscles — writing code, writing prose, trying out products, active listening, engaging a customer, debugging bad YAML, public speaking. For me, at this stage in my career, DevRel is the right place for me to be, and I can’t wait to see what the next year has in store.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*2E7rkdmvBHn0E5rNSpF9oA.gif" /><figcaption><a href="https://media.giphy.com/media/l1UYi5Q7vKz2IdW6Jk/source.gif">source</a></figcaption></figure><p><em>Note: This post also appears on my </em><a href="https://askmeegs.dev/posts/one-year-in-devrel/"><em>personal blog</em></a><em>.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=21b516fdaa05" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building My Own Notes App (Glitch, Kubernetes)]]></title>
            <link>https://medium.com/@askmeegs/building-my-own-notes-app-glitch-kubernetes-bdd340af46c7?source=rss-db638f78c20f------2</link>
            <guid isPermaLink="false">https://medium.com/p/bdd340af46c7</guid>
            <category><![CDATA[kubernetes]]></category>
            <category><![CDATA[firestore]]></category>
            <category><![CDATA[web-development]]></category>
            <category><![CDATA[golang]]></category>
            <category><![CDATA[glitch]]></category>
            <dc:creator><![CDATA[Megan O’Keefe]]></dc:creator>
            <pubDate>Tue, 21 May 2019 17:01:47 GMT</pubDate>
            <atom:updated>2019-05-21T17:01:47.986Z</atom:updated>
            <content:encoded><![CDATA[<p><em>TLDR: Code is </em><a href="https://glitch.com/edit/#!/meegs"><em>here</em></a><em> (frontend) and </em><a href="https://github.com/askmeegs/notes"><em>here</em></a><em> (backend).</em></p><p>I’ve used lots of notes apps. <a href="https://simplenote.com/">Simplenote</a>. <a href="https://brettterpstra.com/projects/nvalt/">nvALT</a>. <a href="https://bear.app/">Bear</a>. Apple Notes. And they’ve worked well enough. But lately I’ve been looking for two things:</p><ol><li>A programmatic way to read/write notes (API)</li><li>A way to see a random note from the past (for inspiration)</li></ol><p>Right now, I’m using Apple Notes across all my devices, which is locked down re: programmatic access. So I knew it was time for a change. To take a first stab at the problem, I wrote my own private notes server, with an accompanying frontend.</p><h3>Design</h3><p>My requirements were minimal:</p><ol><li>Create + view notes. (And notes can be immutable; no need to edit.)</li><li>View a random note</li><li>HTTPS everywhere. Also, the frontend must be locked down with a login screen.</li></ol><p>Here is where I landed:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*rOln4bhABLbUvLir.png" /><figcaption>Notes App Architecture</figcaption></figure><h3>💻 Frontend</h3><p>I chose to use <a href="https://glitch.com/about/">Glitch</a> to create (and host) my notes frontend. I’ve heard great things about Glitch — it’s a community of developers/apps, but also way to create free, fully-hosted web apps without having to deal with npm, etc. on my own machine. I think my use case (a “hacking on the web” / side-project sort of app) was a great fit for Glitch, and I’d definitely recommend it.</p><p>My JavaScript is rusty, so writing the frontend took the most time out of this whole process. (<a href="https://glitch.com/edit/#!/meegs">Code here</a>.) For the server-side, I settled on a set of <a href="https://expressjs.com/">express.js</a> endpoints (node.js), rendered via <a href="https://pugjs.org/api/getting-started.html">pug.js</a>. The express functions use <a href="https://flaviocopes.com/axios/">axios.js</a> to call the backend notes server.</p><p>On the client-side, I used <a href="https://jquery.com/">jQuery</a> for my button listeners. I also used <a href="https://datatables.net/">DataTables</a> to add search (and sorting) to my list of notes:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0-6_jVK1Jj3C4eI3kOzfvQ.gif" /></figure><p>My favorite thing about writing the frontend was creating the Pug views. So simple! Here’s where I show a random note:</p><pre>div.one<br>      if error <br>        h4= error <br>      if note <br>        h1 a note from the past<br>        div.one<br>          p.randomText= note.note</pre><p>… Which renders to:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FmJtbI_GkHs89r7a7oRULg.gif" /></figure><p>Finally, the whole frontend is locked down with a login screen, which authenticates with the backend, and stores a <a href="https://jwt.io/">JWT</a> as a cookie. This cookie is used for all subsequent calls to the Backend…</p><h3>☸️ Backend</h3><p>I <em>could</em> have just had my Node.js backend call the database directly. But for more practice, I wrote a server backend in Golang (<a href="https://github.com/askmeegs/notes">code here</a>). Then, I deployed the backend to Kubernetes, beneath a domain name I had lying around.</p><p>The backend is a dead-simple golang HTTP server that speaks JSON (I didn’t use any API frameworks or generators). For instance, the handler for getting all the notes looks like this:</p><pre>// GetNotesHandler gets all notes<br>func GetNotesHandler(w http.ResponseWriter, r *http.Request) {<br> w.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)<br> w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)</pre><pre>if err := validateJwt(r); err != nil {<br>  w.WriteHeader(http.StatusUnauthorized)<br>  io.WriteString(w, err.Error())<br>  return<br> }</pre><pre>notes, err := getNotesHelper()<br> if err != nil {<br>  w.WriteHeader(http.StatusInternalServerError)<br>  io.WriteString(w, err.Error())<br> }</pre><pre>output, _ := json.Marshal(notes)</pre><pre>w.WriteHeader(http.StatusOK)<br> io.WriteString(w, string(output))<br>}</pre><p>All calls to the server must have a valid JWT, issued via the POST /loginendpoint.</p><p>Then, I wrote a simple <a href="https://github.com/askmeegs/notes/blob/master/Dockerfile">Dockerfile</a> to containerize the server, then pushed it to my image repo (in Google Container Registry).</p><p>Next, I knew I’d have to deploy this Docker container somewhere. I know <a href="https://kubernetes.io/">Kubernetes</a>, so I chose to deploy to <a href="https://cloud.google.com/kubernetes-engine/">GKE</a> out of convenience. But Kubernetes was probably overkill for my use case (see: <a href="https://twitter.com/dexhorthy/status/856639005462417409?lang=en">relevant tweet</a>), because I’m the only user of my backend server, and I probably won’t generate a lot of requests.</p><p>Using GKE, however, allowed me to set up <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs#creating_an_ingress_with_a_managed_certificate">Managed SSL certificates</a> for my domain, using the Kubernetes Ingress resource, and a GCP static IP address. Meaning I could hit https://&lt;my-domain-name&gt; and reach my backend server. This came in handy when it came time to connect my Glitch frontend to the backend (Glitch doesn’t allow plain http calls.). The alternative, here, would be to use <a href="https://letsencrypt.org/">LetsEncrypt</a> or another certificate authority for your domain.</p><p>Finally, here’s my Kubernetes <a href="https://github.com/askmeegs/notes/blob/master/kubernetes/deployment.yaml#L21">deployment YAML</a>, which actually deploys the backend server container into my Kubernetes cluster:</p><pre>     containers:<br>      - name: server<br>        image:  gcr.io/notesdb/notes:v0.0.4<br>        imagePullPolicy: Always<br>        ports:<br>        - containerPort: 8080<br>        volumeMounts:<br>        - name: firestore-key<br>          mountPath: /var/secrets/google</pre><p>What’s that /var/secrets/google? It’s a mounted-in Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/">secret</a>, which I added to my cluster ahead of time. This secret contains the credentials needed to talk to the database…</p><h3>📝 Database</h3><p>My notes have to live somewhere, so for a database I chose <a href="https://cloud.google.com/firestore/">Firestore</a>, which is Google Cloud’s newer NoSQL database for web and mobile. I chose Firestore mostly because I’d never tried it before; I could have also used Google Cloud <a href="https://cloud.google.com/datastore/docs/firestore-or-datastore#in_datastore_mode">Datastore</a> or some other NoSQL database.</p><p>The DB itself lives in the same Google Cloud project as my Kubernetes cluster, and it’s a single collection with a bunch of documents. Each document represents one Note.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*lZZoP5icnEAnCOkA.png" /></figure><p>My backend code uses the Firestore <a href="https://github.com/GoogleCloudPlatform/golang-samples/tree/2c83bbf7c4360188b57fb430e2536eb8bb70c843/firestore">client library</a> for Golang. This was really easy to use — you just need a <a href="https://firebase.google.com/docs/firestore/quickstart">service account</a> key, and you can start writing documents to your collection, like this:</p><pre>n := Note{<br>  Timestamp: time.Now().Format(time.RFC3339),<br>  Note:      note.Note,<br> }</pre><pre>_, _, err = client.Collection(&quot;notes&quot;).Add(context.Background(), n)</pre><h3>That’s a wrap!</h3><p>This was a fun weekend project. And while there’s a lot I want to improve (a better mobile UX, render embedded links in the frontend), I’m happy with my app so far.</p><p>✨ Thanks for reading!</p><p><em>This post originally appeared at </em><a href="https://askmeegs.dev/posts/notes-project/"><em>https://askmeegs.dev/posts/notes-project/</em></a><em> .</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bdd340af46c7" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Kubernetes Development Workflow for MacOS ]]></title>
            <link>https://medium.com/@askmeegs/a-kubernetes-development-workflow-for-macos-8c41669a4518?source=rss-db638f78c20f------2</link>
            <guid isPermaLink="false">https://medium.com/p/8c41669a4518</guid>
            <category><![CDATA[docker]]></category>
            <category><![CDATA[macos]]></category>
            <category><![CDATA[kubernetes]]></category>
            <category><![CDATA[kubectl]]></category>
            <category><![CDATA[containers]]></category>
            <dc:creator><![CDATA[Megan O’Keefe]]></dc:creator>
            <pubDate>Thu, 24 Jan 2019 17:05:48 GMT</pubDate>
            <atom:updated>2019-01-24T17:07:08.409Z</atom:updated>
            <content:encoded><![CDATA[<h3>💻 A Kubernetes Developer Workflow for MacOS</h3><p><a href="https://kubernetes.io/">Kubernetes</a> development is not one-size-fits-all. Maybe you’re learning Kubernetes with <a href="https://github.com/kubernetes/minikube">Minikube</a> on your local machine; maybe you’re part of a large organization with many clusters; maybe your cluster is an on-prem lab, or lives in the cloud.</p><p>But whether you’re a cluster operator managing policies, an app developer test-driving a new service, or a data scientist running <a href="https://www.kubeflow.org/docs/about/kubeflow">Kubeflow</a>, chances are you are doing some (or all) of: connecting to a cluster, inspecting its state, creating resources, and debugging those resources.</p><p>As a <a href="https://twitter.com/mo_keefe">developer relations engineer</a> for Kubernetes, I work a lot with demo code, samples, and sandbox clusters. This can get interesting to keep track of (read: total chaos). So in this post I’ll show some of the tools that make my Kubernetes life a lot better.</p><p>This environment can work no matter what flavor of Kubernetes you’re running, and all these tools are made possible by the amazing open source community.</p><h3>💻 terminal</h3><p>I use <a href="https://www.iterm2.com/"><strong>iterm2</strong></a> with the <a href="https://github.com/JonathanSpeek/palenight-iterm2"><strong>palenight</strong></a> color scheme. On top of that, I’m running <a href="http://www.zsh.org/"><strong>zsh</strong></a> and <a href="https://github.com/robbyrussell/oh-my-zsh"><strong>oh_my_zsh</strong></a> with the default robby-russell theme.</p><p>This theme has basic Git support but is otherwise minimal. If you’re interested in displaying your current Kubernetes context in your shell prompt, check out <a href="https://github.com/jonmosco/kube-ps1">kube-ps1</a> or the <a href="https://github.com/denysdovhan/spaceship-prompt#features">spaceship</a> prompt.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JSiYljTJt2LyffjZ9_Irag.png" /></figure><p>Second, my ~/.zshrc file has an essential line:</p><pre>source &lt;(kubectl completion zsh)</pre><p>This <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion">enables</a> tab completion for kubectl commands. No more copy-pasting pod names!</p><h3>🛶 navigating clusters</h3><p>On any given day, I might switch between three clusters. This might describe you too! Do you get annoyed anytime you have to open your kubeconfig?Same! Luckily, there is <a href="https://github.com/ahmetb/kubectx">kubectx</a> for exactly this purpose:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vt7On1gLVnZyFKDScL-GJw.gif" /><figcaption><a href="https://github.com/ahmetb/kubectx">kubectx</a></figcaption></figure><p>kubectx lets you navigate between cluster <a href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#define-clusters-users-and-contexts">contexts</a> easily. My favorite thing is running kubectx -, which takes you to the cluster you were using last.</p><h3>⚡️ superpowered kubectl</h3><p>Now that we’ve got a cluster to work with, let’s do stuff.</p><p>Maybe you’ve felt that kubectl commands can get very long, with lots of command-line flags. I have found that kubectl tab completion, plus a comprehensive set of aliases (command shortcuts), helps a lot.</p><p>Here is a <a href="https://github.com/ahmetb/kubectl-aliases">great list of kubectl aliases</a>, that lets you run things like:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8j4WgwFfK_9wOHq5K2TUtg.png" /><figcaption>get pods</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*trS4MZoird8kgIaM618eig.png" /><figcaption>describe pod</figcaption></figure><p>Finally, I use a few <a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/">kubectl plugins</a>. But manually setting these up can get annoying. So I use <a href="https://github.com/GoogleContainerTools/krew">krew</a>, <a href="https://medium.com/@ahmetb/kubectl-plugin-management-21dcd93e3721">an open-source plugin manager </a>for kubectl:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1TjlIdS2DfKVabZ5ldCLCg.gif" /><figcaption>krew</figcaption></figure><p>krew lets you browse, install, and use kubectl plugins, so that you can run custom commands.</p><h3>📜 wrangling yaml</h3><p>Now that we have a cluster ready to go, let’s deploy something.</p><p>Developing on Kubernetes means writing, managing, updating, and deploying lots of YAML files. I keep all my YAML files in <a href="https://github.com/m-okeefe/helloworld">Git</a>. Adopting <a href="https://www.weave.works/technologies/gitops/">GitOps</a> early (rather than keeping files locally) lets me see revision history as I’m doing early debugging, and sets me up for success later if/when I start formalizing a pipeline for the application I’m working on. (example: a Github webhook for a CI/CD pipeline.)</p><p>I use <a href="https://code.visualstudio.com/">VSCode</a> as my text editor, plus the <a href="https://marketplace.visualstudio.com/items?itemName=atomiks.moonlight">Moonlight</a> theme. And while VSCode has a ton of great features on its own, Red Hat’s <a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml">YAML Suppor</a>t plugin is very handy for validation, autocompletion, and formatting.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ZGdvQwvn6_8WavC8L3XJ5Q.png" /></figure><p>Right now my process of writing Kubernetes YAML is fairly manual. But usually for every new project, I’m writing the same Kubernetes specs: ConfigMap, Secret, Volume, Deployment, Service.</p><p>I’m actively looking into ways to streamline this process, whether through text editor extensions, <a href="https://github.com/kubernetes-sigs/kustomize">templating</a>, or other tools. If you have tools that you use to help write and manage YAML, comment down below! ⬇️</p><h3>✨ deploying</h3><p>We have our YAML files. Now we can deploy the resources! Given my souped-up kubectl environment, it’s tempting to do this manually.</p><p>But this can be a struggle road, dragging you into the same docker build, docker push, kubectl apply, andkubectl delete pod commands. No fun.</p><p>A tool called <a href="https://skaffold.dev/">skaffold</a> can automate away much of this pain. skaffold is magical: it watches your codebase for changes. When you save changes locally, skaffold will automatically docker build, push a new image tag, and redeploy into your cluster.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*rF-csS89udEJ6w-O9KFEbg.gif" /></figure><p>One really cool thing skaffold does is auto-generate image tags. So in your actual YAML, you just list the image repo, not the tag, and skaffold will populate the new tag(s) on deploy.</p><pre>spec:<br>  containers:<br>  - name: helloworld<br>    image:  gcr.io/megangcp/helloworld<br>    imagePullPolicy: Always<br>   ports:<br>     - containerPort: 8080</pre><p>All that skaffold needs is a (yes, YAML) configuration file:</p><pre>apiVersion: skaffold/v1beta3<br>kind: Config<br>build:<br>  artifacts:<br>  - image: gcr.io/megangcp/helloworld<br>deploy:<br>  kubectl:<br>    manifests:<br>      - kubernetes/*</pre><p>This is a minimal config where I specify my image repo (in this case, in <a href="https://cloud.google.com/container-registry/">Google Container Registry</a>, but any image registry like <a href="https://hub.docker.com/">DockerHub</a> also works). I also specify directory where my manifests live.</p><p>skaffold <a href="https://github.com/GoogleContainerTools/skaffold/tree/master/examples">is highly customizable</a>, and can work with deploy tools like Helm in addition to kubectl.</p><h3>🐳 inspecting docker images</h3><p>skaffold abstracts the docker build process, but sometimes I want to look into my newly-built images to inspect things like: what is the image size compared to previous versions? what are the contents of each of my image layers?</p><p><a href="https://github.com/wagoodman/dive">dive</a> is an amazing tool for inspecting Docker images.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zLIgc-0sHlfLAH0eJ06S6g.gif" /></figure><p>With dive, I can examine filesystem changes between different layers. This is super helpful if something in my Docker build has gone wrong.</p><h3>😱 debugging</h3><p>Now we’ve got pods running Kubernetes. What next?</p><p>Every so often (read: all the time) something goes wrong — with my spec, or with my application code.</p><p>My kubernetes debugging workflow is usually:</p><ol><li><strong>Describe the pod</strong> (kdpo alias). Is it my spec’s fault? (example: is the Deployment trying to mount a Secret I accidentally put in a different Namespace?) If not…</li><li><strong>Get the pod logs</strong>. the <a href="https://skaffold.dev/docs/getting-started/#skaffold-dev-build-and-deploy-your-app-every-time-your-code-changes">skaffold dev</a> command will combine all the logs for every container deployed and stream all of it to stdout. But I’ve found that when I have two or more pods running, that format gets noisy. At the same time, the usual kubectl logs command can result in an endless cycle of copy-pasting new pod names.</li></ol><p><a href="https://github.com/wercker/stern">stern</a> is a great alternative for tailing logs in a more customizable way. stern uses regular expressions to select on pods — and given that all pods start with their deployment name, you can follow logs for all the pods in a deployment, without having to know the exact pod name. Super helpful:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WqZ3eEhhbt8Wau_G6DWDyQ.png" /></figure><p>If the logs aren’t giving me clues for what’s gone wrong, usually I’ll…</p><p>3.<strong> Exec into the pod</strong> (kex alias with tab completion):</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RnF4LX330A4slnax3cvt3A.png" /></figure><h3>that’s a wrap</h3><p>Kubernetes is a big, complex piece of software with a large configuration model. I hope sharing some of these tools might help you, wherever you’re at in your k8s journey.</p><p>Here’s the full list of tools and plugins mentioned in this post:</p><ul><li><a href="https://www.iterm2.com/">iterm2</a> / <a href="https://github.com/JonathanSpeek/palenight-iterm2">palenight</a> / <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></li><li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion">kubectl tab completion</a></li><li><a href="https://github.com/ahmetb/kubectx">kubectx</a></li><li><a href="https://github.com/ahmetb/kubectl-aliases">kubectl aliases</a></li><li><a href="https://github.com/GoogleContainerTools/krew">krew</a></li><li><a href="https://code.visualstudio.com/">VSCode</a> with <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a></li><li><a href="https://github.com/GoogleContainerTools/skaffold/tree/master/examples/getting-started">skaffold</a></li><li><a href="https://github.com/wagoodman/dive">dive</a></li><li><a href="https://github.com/wercker/stern">stern</a></li></ul><p>✨ <em>Thanks for reading! </em>✨</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8c41669a4518" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>